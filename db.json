{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/static/image/banner.jpg","path":"static/image/banner.jpg","modified":0,"renderable":0},{"_id":"source/static/image/notes/2023/02/20/整体流程图.png","path":"static/image/notes/2023/02/20/整体流程图.png","modified":0,"renderable":0},{"_id":"source/static/image/head-portrait.png","path":"static/image/head-portrait.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1676513755684},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1676515417591},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1676515422290},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1676515420806},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1676515420806},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1676515417625},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1676515417628},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1676515417622},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1676515417629},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1676515420600},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1676515417630},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1676515417629},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1676515422290},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1676515417628},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1676515422291},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1676515422291},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1676515422291},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1676515422291},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1676515422291},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1676515422291},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1676515422291},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1676515422292},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1676515422292},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1676515422292},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1676515422292},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1676515422292},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1676515422292},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1676515422293},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1676515422293},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1676515417625},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1676515417601},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1676515417610},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1676515417613},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1676515417622},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1676515417626},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1676515417627},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1676515417628},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1676515417627},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1676515417627},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1676515417619},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1676515417624},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1676515417630},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1676515417629},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1676515417630},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1676515417630},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1676515420805},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1676515417597},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1676515421307},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1676515421311},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1676515421307},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1676515417624},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1676515417625},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1676515417626},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1676515417630},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1676515417630},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1676515417629},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1676515421309},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1676515421310},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1676515421308},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1676515421308},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1676515421309},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1676515421309},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1676515421309},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1676515421309},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1676515421310},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1676515421310},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1676515421310},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1676515421310},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1676515420668},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1676515420805},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1676515422289},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1676515422219},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1676515421303},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1676515419378},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1676515422039},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1676515420533},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1676515421783},{"_id":"node_modules/hexo-theme-Butterfly/package.json","hash":"a796587e264bbdb88b38a6abc0ab8076f544055b","modified":1676515420517},{"_id":"node_modules/hexo-theme-Butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1676515420517},{"_id":"node_modules/hexo-theme-Butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1676515420635},{"_id":"node_modules/hexo-theme-Butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1676515418533},{"_id":"node_modules/hexo-theme-Butterfly/_config.yml","hash":"7204ba07bd8168868abbe6c2c0ce2f2be8d7cea1","modified":1676515421753},{"_id":"node_modules/hexo-theme-Butterfly/languages/en.yml","hash":"e0e52a7ba52fa70c3557f00ddf681f66098ac8b7","modified":1676515421758},{"_id":"node_modules/hexo-theme-Butterfly/plugins.yml","hash":"ee8d1240372fc90e2666759088ad0c5375666d74","modified":1676515421759},{"_id":"node_modules/hexo-theme-Butterfly/languages/zh-CN.yml","hash":"0b994863599d62c56d2bc50d20b94332ed9d98cf","modified":1676515421760},{"_id":"node_modules/hexo-theme-Butterfly/languages/default.yml","hash":"9b9c5b8158d1296c64a354e57a3b0b809575a77d","modified":1676515421758},{"_id":"node_modules/hexo-theme-Butterfly/languages/zh-TW.yml","hash":"5b9ce449bd4f7e3ba46131546e75976efe31a1f6","modified":1676515421761},{"_id":"node_modules/hexo-theme-Butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1676515420656},{"_id":"node_modules/hexo-theme-Butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1676515420638},{"_id":"node_modules/hexo-theme-Butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1676515421154},{"_id":"node_modules/hexo-theme-Butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1676515421151},{"_id":"node_modules/hexo-theme-Butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1676515421153},{"_id":"node_modules/hexo-theme-Butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1676515421757},{"_id":"node_modules/hexo-theme-Butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1676515421756},{"_id":"node_modules/hexo-theme-Butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1676515421760},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1676515420637},{"_id":"node_modules/hexo-theme-Butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1676515421760},{"_id":"node_modules/hexo-theme-Butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1676515421428},{"_id":"node_modules/hexo-theme-Butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1676515421759},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/additional-js.pug","hash":"d1bf03af239d94a8f03e040ef4dd5ea6334a48fd","modified":1676515420637},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1676515421153},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/layout.pug","hash":"bb45b395d530d2930c79555432e398c142d4a16f","modified":1676515421152},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/cdn.js","hash":"f5cbd41c6afb49639b59ab5ad659da0d3b7f25dd","modified":1676515420051},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1676515420050},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1676515421149},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1676515420051},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1676515420349},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1676515420052},{"_id":"node_modules/hexo-theme-Butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1676515420517},{"_id":"node_modules/hexo-theme-Butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1676515420349},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1676515420051},{"_id":"node_modules/hexo-theme-Butterfly/scripts/filters/random_cover.js","hash":"d1a5b26c8239189493c1f7d8fd0b8f8ec3d11eaa","modified":1676515420349},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1676515420051},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1676515420052},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/inject_head_js.js","hash":"c2d4d0537f9aed4eba2bb3d093ad89ca9e80cff9","modified":1676515420052},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head.pug","hash":"a8720f01c429c839149d7f5991c49541011f4796","modified":1676515421150},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/page.js","hash":"f92dc2116776ac897b913130b574f1c78491bc76","modified":1676515420349},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1676515420051},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/gallery.js","hash":"fc0b813452a705911af37b891513ae50a8795710","modified":1676515420052},{"_id":"node_modules/hexo-theme-Butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1676515420349},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1676515420052},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1676515420052},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1676515420052},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1676515420348},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1676515420052},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1676515420350},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1676515420349},{"_id":"node_modules/hexo-theme-Butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1676515420350},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1676515421427},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1676515421427},{"_id":"node_modules/hexo-theme-Butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1676515421631},{"_id":"node_modules/hexo-theme-Butterfly/source/css/var.styl","hash":"e018dad9f674fc5564112b99032fe5fe8b2d195f","modified":1676515421635},{"_id":"node_modules/hexo-theme-Butterfly/source/js/main.js","hash":"c0a3093c2485fa2121c10741e256170f211c7398","modified":1676515420348},{"_id":"node_modules/hexo-theme-Butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1676515420636},{"_id":"node_modules/hexo-theme-Butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1676515420050},{"_id":"node_modules/hexo-theme-Butterfly/source/js/utils.js","hash":"c9b4d8ec10a74f29cf1f9c4275f0cae3bd93b427","modified":1676515420516},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1676515421153},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1676515420638},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1676515421153},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1676515421150},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1676515421154},{"_id":"node_modules/hexo-theme-Butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1676515420515},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1676515421152},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1676515421427},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/header/nav.pug","hash":"c72be46dadef859681c87b9fca27590dee255594","modified":1676515421153},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1676515421150},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1676515421154},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1676515421427},{"_id":"node_modules/hexo-theme-Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1676515419810},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/loading/fullpage-loading.pug","hash":"c4b86758f3a3deae4612c31d725814c8753a7804","modified":1676515421149},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1676515420657},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1676515421150},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/loading/pace.pug","hash":"278855fe4399489bdef0393697bb87420e671fe9","modified":1676515421153},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1676515421154},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/head/config.pug","hash":"428e3c39053b44760463682848f2eae238ff9d64","modified":1676515420657},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1676515420656},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1676515420653},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1676515421149},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1676515421428},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1676515421427},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1676515421154},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1676515421154},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1676515420638},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1676515420657},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1676515421153},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1676515421154},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":1676515421428},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1676515421153},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1676515420658},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1676515420654},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1676515420654},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1676515420654},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1676515420653},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1676515420654},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1676515420655},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1676515420654},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1676515420655},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1676515420655},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1676515420655},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1676515420656},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1676515420655},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1676515421151},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1676515421433},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1676515421433},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_mode/darkmode.styl","hash":"a92984f566c97bb4179f34be79240af1552c6f17","modified":1676515421431},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_global/index.styl","hash":"336b7ac54b66a1d70baa9bde51d1a5aca92f451e","modified":1676515421630},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1676515421431},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/aside.styl","hash":"f69c52415a5201083b3811e9faf7de80476569d3","modified":1676515421431},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1676515421433},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1676515421633},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1676515421632},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1676515421432},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1676515421431},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1676515421635},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/post.styl","hash":"23db4e3cab68fed78601fc8a9c39ff5753bcc716","modified":1676515421633},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1676515421633},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1676515421633},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1676515421633},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1676515421633},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1676515421429},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/third-party.styl","hash":"56389925671c7e8da0c033769421269e15e8f795","modified":1676515421635},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1676515421430},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1676515421634},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1676515421432},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1676515421431},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1676515421634},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1676515421431},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1676515421431},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1676515421433},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1676515421631},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1676515421433},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1676515421433},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1676515421634},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1676515421632},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_search/algolia.styl","hash":"7fdbe79b6c98157706be016f990ab3501bd796b1","modified":1676515421430},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1676515421631},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1676515421633},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_search/local-search.styl","hash":"86f3962a6ea11b2951b4ddb6424fda5e95ec962a","modified":1676515421632},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1676515420638},{"_id":"node_modules/hexo-theme-Butterfly/source/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1676515420051},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1676515421635},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1676515421630},{"_id":"node_modules/hexo-theme-Butterfly/source/js/search/local-search.js","hash":"ee86f52bb6558c51a6f31402c2e4ec1dcb81bb55","modified":1676515420201},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1676515418536},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"b2aadea7351fae8382b8c2a3b9de810d922b0ec1","modified":1676515421149},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1676515421150},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1676515420657},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1676515421154},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1676515421429},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1676515421428},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1676515421428},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1676515420656},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1676515420657},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1676515420657},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":1676515420639},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1676515421149},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/index.pug","hash":"0611d9216f4c128ebdea4cc21454c3dc4a6398d5","modified":1676515421151},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1676515421428},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/chat/messenger.pug","hash":"ccb7d8ce3ded7364f9a15334b68ad73869fca757","modified":1676515421153},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":1676515420658},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1676515420657},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1676515421152},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1676515421149},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"eefdaa94956adc7a3ca90dd8edcd70a7574b439c","modified":1676515421148},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1676515421151},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1676515421152},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1676515421428},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1676515421154},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1676515420657},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":1676515421149},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1676515421428},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1676515421428},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1676515421149},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"c12c898b35dd014780c1f3220ddbe12e7270983c","modified":1676515420652},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1676515421429},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1676515421151},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1676515421427},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1676515421428},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1676515421151},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1676515421429},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1676515421153},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/math/mathjax.pug","hash":"1c846c8d51649b8554d91536323eaeb20c8fc236","modified":1676515421152},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":1676515421429},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1676515421151},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1676515421152},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1676515420638},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1676515420637},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1676515420637},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1676515421427},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1676515421152},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1676515421432},{"_id":"node_modules/hexo-theme-Butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1676515421151},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1676515421631},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1676515421631},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1676515421432},{"_id":"node_modules/hexo-theme-Butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1676515421632},{"_id":"themes/Butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1676516192207},{"_id":"themes/Butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1676516192208},{"_id":"themes/Butterfly/package.json","hash":"4312f96202959ef3994502828fe8d5c8bce647ce","modified":1676516192214},{"_id":"themes/Butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1676516192208},{"_id":"themes/Butterfly/_config.yml","hash":"190247bf9f8243a3d98cef6b2d6abb1ffad37a70","modified":1676858530191},{"_id":"themes/Butterfly/languages/default.yml","hash":"2b02e8e38c87bc57a11fb5038acb3ca88eda6066","modified":1676858784916},{"_id":"themes/Butterfly/plugins.yml","hash":"ee8d1240372fc90e2666759088ad0c5375666d74","modified":1676516192214},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"0b994863599d62c56d2bc50d20b94332ed9d98cf","modified":1676516192208},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"5b9ce449bd4f7e3ba46131546e75976efe31a1f6","modified":1676516192208},{"_id":"themes/Butterfly/languages/en.yml","hash":"e4c9b5568efa47116f91cdc1d95a64edfb446555","modified":1676859017451},{"_id":"themes/Butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1676516192208},{"_id":"themes/Butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1676516192208},{"_id":"themes/Butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1676516192214},{"_id":"themes/Butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1676516192214},{"_id":"themes/Butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1676516192214},{"_id":"themes/Butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1676516192214},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1676516192207},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1676516192207},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1676516192207},{"_id":"themes/Butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1676516192207},{"_id":"themes/Butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1676516192207},{"_id":"themes/Butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1676516192208},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"d1bf03af239d94a8f03e040ef4dd5ea6334a48fd","modified":1676516192208},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"bb45b395d530d2930c79555432e398c142d4a16f","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"a8720f01c429c839149d7f5991c49541011f4796","modified":1676516192208},{"_id":"themes/Butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1676516192215},{"_id":"themes/Butterfly/scripts/events/cdn.js","hash":"f5cbd41c6afb49639b59ab5ad659da0d3b7f25dd","modified":1676516192215},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1676516192208},{"_id":"themes/Butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1676516192215},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1676516192210},{"_id":"themes/Butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1676516192215},{"_id":"themes/Butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1676516192215},{"_id":"themes/Butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1676516192215},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1676516192210},{"_id":"themes/Butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1676516192215},{"_id":"themes/Butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1676516192215},{"_id":"themes/Butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1676516192215},{"_id":"themes/Butterfly/scripts/filters/random_cover.js","hash":"d1a5b26c8239189493c1f7d8fd0b8f8ec3d11eaa","modified":1676516192215},{"_id":"themes/Butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1676516192215},{"_id":"themes/Butterfly/scripts/helpers/page.js","hash":"f92dc2116776ac897b913130b574f1c78491bc76","modified":1676516192215},{"_id":"themes/Butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1676516192215},{"_id":"themes/Butterfly/scripts/helpers/inject_head_js.js","hash":"c2d4d0537f9aed4eba2bb3d093ad89ca9e80cff9","modified":1676516192215},{"_id":"themes/Butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1676516192215},{"_id":"themes/Butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1676516192216},{"_id":"themes/Butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1676516192216},{"_id":"themes/Butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1676516192216},{"_id":"themes/Butterfly/scripts/tag/gallery.js","hash":"fc0b813452a705911af37b891513ae50a8795710","modified":1676516192216},{"_id":"themes/Butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1676516192216},{"_id":"themes/Butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1676516192216},{"_id":"themes/Butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1676516192216},{"_id":"themes/Butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1676516192216},{"_id":"themes/Butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1676516192216},{"_id":"themes/Butterfly/source/css/var.styl","hash":"e018dad9f674fc5564112b99032fe5fe8b2d195f","modified":1676516192219},{"_id":"themes/Butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1676516192219},{"_id":"themes/Butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1676516192220},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1676516192220},{"_id":"themes/Butterfly/source/js/main.js","hash":"c0a3093c2485fa2121c10741e256170f211c7398","modified":1676516192220},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1676516192220},{"_id":"themes/Butterfly/source/js/utils.js","hash":"c9b4d8ec10a74f29cf1f9c4275f0cae3bd93b427","modified":1676516192221},{"_id":"themes/Butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1676516192209},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1676516192221},{"_id":"themes/Butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/head/config.pug","hash":"428e3c39053b44760463682848f2eae238ff9d64","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/header/nav.pug","hash":"c72be46dadef859681c87b9fca27590dee255594","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/loading/fullpage-loading.pug","hash":"c4b86758f3a3deae4612c31d725814c8753a7804","modified":1676516192209},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/loading/pace.pug","hash":"278855fe4399489bdef0393697bb87420e671fe9","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1676516192214},{"_id":"themes/Butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1676516192214},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"f69c52415a5201083b3811e9faf7de80476569d3","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1676516192216},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1676516192216},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"336b7ac54b66a1d70baa9bde51d1a5aca92f451e","modified":1676516192216},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"23db4e3cab68fed78601fc8a9c39ff5753bcc716","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_layout/third-party.styl","hash":"56389925671c7e8da0c033769421269e15e8f795","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_mode/darkmode.styl","hash":"a92984f566c97bb4179f34be79240af1552c6f17","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"7fdbe79b6c98157706be016f990ab3501bd796b1","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"86f3962a6ea11b2951b4ddb6424fda5e95ec962a","modified":1676516192219},{"_id":"themes/Butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1676516192218},{"_id":"themes/Butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1676516192219},{"_id":"themes/Butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1676516192219},{"_id":"themes/Butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1676516192219},{"_id":"themes/Butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1676516192219},{"_id":"themes/Butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1676516192219},{"_id":"themes/Butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1676516192219},{"_id":"themes/Butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1676516192219},{"_id":"themes/Butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1676516192219},{"_id":"themes/Butterfly/source/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1676516192220},{"_id":"themes/Butterfly/source/js/search/local-search.js","hash":"ee86f52bb6558c51a6f31402c2e4ec1dcb81bb55","modified":1676516192220},{"_id":"themes/Butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1676516192219},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"b2aadea7351fae8382b8c2a3b9de810d922b0ec1","modified":1676516192210},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1676516192210},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1676516192219},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/chat/index.pug","hash":"0611d9216f4c128ebdea4cc21454c3dc4a6398d5","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/chat/messenger.pug","hash":"ccb7d8ce3ded7364f9a15334b68ad73869fca757","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"eefdaa94956adc7a3ca90dd8edcd70a7574b439c","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":1676516192211},{"_id":"themes/Butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"c12c898b35dd014780c1f3220ddbe12e7270983c","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/math/mathjax.pug","hash":"1c846c8d51649b8554d91536323eaeb20c8fc236","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1676516192212},{"_id":"themes/Butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1676516192213},{"_id":"themes/Butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1676516192213},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1676516192217},{"_id":"themes/Butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1676516192213},{"_id":"themes/Butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1676516192217},{"_id":"themes/Butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1676516192217},{"_id":"source/_data/butterfly.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676518002230},{"_id":"source/tags/index.md","hash":"fff72103a76226b94bb6a99e9d65e68fe2da68c2","modified":1676518286124},{"_id":"source/static/image/banner.jpg","hash":"30823db02d524d15e288e14f888db63d2ac71d79","modified":1547441463000},{"_id":"public/404.html","hash":"3e5f496a61810e1033539aecddc0bd7474c03375","modified":1676526188066},{"_id":"public/tags/index.html","hash":"4fa3561e6c8dccbaaf844e5f2565b2d73603d109","modified":1676526188066},{"_id":"public/2023/02/16/hello-world/index.html","hash":"cead424b5ad045c0a3378ee8f6b3edabec3f6c83","modified":1676526188066},{"_id":"public/archives/index.html","hash":"cc0b3797ae3a6c554eb90df59aa2e592031a5394","modified":1676526188066},{"_id":"public/archives/2023/index.html","hash":"9a598f5fd850b00bd7e1f55f39f926226317ab9d","modified":1676526188066},{"_id":"public/archives/2023/02/index.html","hash":"ae36d928e0a41ad2873ecd72e186bfc25e40817c","modified":1676526188066},{"_id":"public/index.html","hash":"61fbefc92ff30c4db4307568f54f53ff3df403bf","modified":1676526188066},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1676526188066},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1676526188066},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1676526188066},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1676526188066},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1676526188066},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1676526188066},{"_id":"public/js/utils.js","hash":"c9b4d8ec10a74f29cf1f9c4275f0cae3bd93b427","modified":1676526188066},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1676526188066},{"_id":"public/js/search/local-search.js","hash":"ee86f52bb6558c51a6f31402c2e4ec1dcb81bb55","modified":1676526188066},{"_id":"public/css/index.css","hash":"8604d7d0f4cea1bad2cd0e4a0c57241e2ea5f36c","modified":1676526188066},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1676526188066},{"_id":"public/css/style.css","hash":"f1b669a54c928168d56b4974aee651af82907e7f","modified":1676526188066},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1676526188066},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1676526188066},{"_id":"public/js/main.js","hash":"c0a3093c2485fa2121c10741e256170f211c7398","modified":1676526188066},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1676526188066},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1676526188066},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1676526188066},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1676526188066},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1676526188066},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1676526188066},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1676526188066},{"_id":"public/static/image/banner.jpg","hash":"30823db02d524d15e288e14f888db63d2ac71d79","modified":1676526188066},{"_id":"source/_posts/metrics-server-source-code-appreciation.md","hash":"83df3d8a07a6d43f152c4d849278ab24960636fe","modified":1676859104660},{"_id":"source/static/image/notes/2023/02/20/整体流程图.png","hash":"4f88d8e95385a55faeefb231493921ae80532939","modified":1676818851980},{"_id":"source/static/image/head-portrait.png","hash":"b2fd3f0747e124ddeec41334ba073dd298057254","modified":1669108278230}],"Category":[],"Data":[],"Page":[{"title":"标签","date":"2022-12-31T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-01-01 00:00:00\ntype: \"tags\"\n---","updated":"2023-02-16T03:31:26.124Z","path":"tags/index.html","_id":"cle6jor700000rym10h8ef67v","comments":1,"layout":"page","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"metrics-server源码赏析","date":"2023-02-02T16:00:00.000Z","updated":"2023-02-02T16:00:00.000Z","type":null,"comments":1,"description":"最近刚好在做HPA，就想着先把kubernetes使用metrics-server的源码先看看，毕竟这也是HPA能够实现的依据，metrics-server主要也是通过aggregate api向其他组件提供集群当中的pod和node的cpu跟内存监控指标的。","keywords":"metrics-server","_content":"\n\n## 1.前言\n\n最近刚好在做HPA，就想着先把kubernetes使用metrics-server的源码先看看，毕竟这也是HPA能够实现的依据，metrics-server主要也是通过aggregate api向其他组件提供集群当中的pod和node的cpu跟内存监控指标的。\n\n\n\n## 2.数据结构\n\n抓取接口是通过\n\n```go\n// https://github.com/kubernetes-sigs/metrics-server/blob/83b2e01f9825849ae5f562e47aa1a4178b5d06e5/pkg/scraper/interface.go#L24\ntype Scraper interface {\n\tScrape(ctx context.Context) *storage.MetricsBatch\n}\n```\n\n从接口我们可以看到返回的是，storage.MetricsBatch，我们可以从源码当中的mock数据窥探出数据的大概模样\n\n```go\n// https://github.com/kubernetes-sigs/metrics-server/blob/83b2e01f9825849ae5f562e47aa1a4178b5d06e5/pkg/server/server_test.go#L47\nBeforeEach(func() {\n\t\tresolution = 60 * time.Second\n\t\tscraper = &scraperMock{\n\t\t\tresult: &storage.MetricsBatch{\n\t\t\t\tNodes: map[string]storage.MetricsPoint{\n\t\t\t\t\t\"node1\": {\n\t\t\t\t\t\tTimestamp:         time.Now(),\n\t\t\t\t\t\tCumulativeCpuUsed: 0,\n\t\t\t\t\t\tMemoryUsage:       0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\tstore = &storageMock{}\n\t\tserver = NewServer(nil, nil, nil, store, scraper, resolution)\n\t})\n```\n\n\n\n## 3.启动流程\n\n![整体流程图](/static/image/notes/2023/02/20/整体流程图.png)\n\n`main`函数就不画出来了，跟其他kubernetes系列项目一样，都是使用cobra来启动的，然后导向到NewMetricsServerCommand\n\n```go\n// NewMetricsServerCommand provides a CLI handler for the metrics server entrypoint\nfunc NewMetricsServerCommand(stopCh <-chan struct{}) *cobra.Command {\n   opts := options.NewOptions()\n   cmd := &cobra.Command{\n      Short: \"Launch metrics-server\",\n      Long:  \"Launch metrics-server\",\n      RunE: func(c *cobra.Command, args []string) error {\n         if err := runCommand(opts, stopCh); err != nil {\n            return err\n         }\n         return nil\n      },\n   }\n   fs := cmd.Flags()\n   nfs := opts.Flags()\n   for _, f := range nfs.FlagSets {\n      fs.AddFlagSet(f)\n   }\n   local := flag.NewFlagSet(os.Args[0], flag.ExitOnError)\n   logs.AddGoFlags(local)\n   nfs.FlagSet(\"logging\").AddGoFlagSet(local)\n\n   usageFmt := \"Usage:\\n  %s\\n\"\n   cols, _, _ := term.TerminalSize(cmd.OutOrStdout())\n   cmd.SetUsageFunc(func(cmd *cobra.Command) error {\n      fmt.Fprintf(cmd.OutOrStderr(), usageFmt, cmd.UseLine())\n      cliflag.PrintSections(cmd.OutOrStderr(), nfs, cols)\n      return nil\n   })\n   cmd.SetHelpFunc(func(cmd *cobra.Command, args []string) {\n      fmt.Fprintf(cmd.OutOrStdout(), \"%s\\n\\n\"+usageFmt, cmd.Long, cmd.UseLine())\n      cliflag.PrintSections(cmd.OutOrStdout(), nfs, cols)\n   })\n   fs.AddGoFlagSet(local)\n   return cmd\n}\n```\n\n真正的运行都是包含在`runCommand`当中，其他就是关于参数的解析校验类的。`runCommand`当中主要就是三步\n\n1. 根据配置文件、启动参数、默认参数生成启动的配置信息\n2. 根据配置信息完成启动的一些对象实例化\n3. 真正启动服务\n\n```go\nfunc runCommand(o *options.Options, stopCh <-chan struct{}) error {\n   if o.ShowVersion {\n      fmt.Println(version.Get().GitVersion)\n      os.Exit(0)\n   }\n\n   errors := o.Validate()\n   if len(errors) > 0 {\n      return errors[0]\n   }\n   // 生成metric-server的server端配置\n   config, err := o.ServerConfig()\n\n   if err != nil {\n      return err\n   }\n\n   // 完成配置注入\n   s, err := config.Complete()\n\n   if err != nil {\n      return err\n   }\n   // 真正启动服务\n   return s.RunUntil(stopCh)\n}\n```\n\n\n\n### 3.1 ServerConfig\n\n`ServerConfig` 就是生成配置文件的，其中有个Client端的配置生成，重点主要看两个\n\n- APIServer的配置生成\n- Client端的配置生成\n\n```go\nfunc (o Options) ServerConfig() (*server.Config, error) {\n   apiserver, err := o.ApiserverConfig()\n   if err != nil {\n      return nil, err\n   }\n   restConfig, err := o.restConfig()\n   if err != nil {\n      return nil, err\n   }\n   return &server.Config{\n      Apiserver: apiserver,\n      Rest:      restConfig,\n      // 生成Client端的配置\n      Kubelet:          o.KubeletClient.Config(restConfig),\n      MetricResolution: o.MetricResolution,\n      ScrapeTimeout:    o.KubeletClient.KubeletRequestTimeout,\n      NodeSelector:     o.KubeletClient.NodeSelector,\n   }, nil\n}\n```\n\n**APIServer的配置生成**\n\n```go\nfunc (o Options) ApiserverConfig() (*genericapiserver.Config, error) {\n   // 检查证书是否可以读取，如果不可以则尝试生成自签名证书\n   if err := o.SecureServing.MaybeDefaultWithSelfSignedCerts(\"localhost\", nil, []net.IP{net.ParseIP(\"127.0.0.1\")}); err != nil {\n      return nil, fmt.Errorf(\"error creating self-signed certificates: %v\", err)\n   }\n\n   serverConfig := genericapiserver.NewConfig(api.Codecs)\n   if err := o.SecureServing.ApplyTo(&serverConfig.SecureServing, &serverConfig.LoopbackClientConfig); err != nil {\n      return nil, err\n   }\n\n   if !o.DisableAuthForTesting {\n      if err := o.Authentication.ApplyTo(&serverConfig.Authentication, serverConfig.SecureServing, nil); err != nil {\n         return nil, err\n      }\n      if err := o.Authorization.ApplyTo(&serverConfig.Authorization); err != nil {\n         return nil, err\n      }\n   }\n\n   if err := o.Audit.ApplyTo(serverConfig); err != nil {\n      return nil, err\n   }\n\n   versionGet := version.Get()\n   serverConfig.Version = &versionGet\n   // enable OpenAPI schemas\n   // 暴露OpenAPI断点\n   serverConfig.OpenAPIConfig = genericapiserver.DefaultOpenAPIConfig(generatedopenapi.GetOpenAPIDefinitions, openapinamer.NewDefinitionNamer(api.Scheme))\n   serverConfig.OpenAPIConfig.Info.Title = \"Kubernetes metrics-server\"\n   serverConfig.OpenAPIConfig.Info.Version = strings.Split(serverConfig.Version.String(), \"-\")[0] // TODO(directxman12): remove this once autosetting this doesn't require security definitions\n\n   return serverConfig, nil\n}\n```\n\n**Client端的配置生成**\n\n关于`metrics-server`访问`node`的优先级配置，就在`Client`端的配置里面了。\n\n```go\n// Config 生成metric-server的client端配置\nfunc (o KubeletClientOptions) Config(restConfig *rest.Config) *client.KubeletClientConfig {\n   config := &client.KubeletClientConfig{\n      Scheme:      \"https\",\n      DefaultPort: o.KubeletPort,\n      // 节点访问优先级\n      AddressTypePriority: o.addressResolverConfig(),\n      UseNodeStatusPort:   o.KubeletUseNodeStatusPort,\n      Client:              *rest.CopyConfig(restConfig),\n   }\n   if o.DeprecatedCompletelyInsecureKubelet {\n      config.Scheme = \"http\"\n      config.Client = *rest.AnonymousClientConfig(&config.Client) // don't use auth to avoid leaking auth details to insecure endpoints\n      config.Client.TLSClientConfig = rest.TLSClientConfig{}      // empty TLS config --> no TLS\n   }\n   if o.InsecureKubeletTLS {\n      config.Client.TLSClientConfig.Insecure = true\n      config.Client.TLSClientConfig.CAData = nil\n      config.Client.TLSClientConfig.CAFile = \"\"\n   }\n   if len(o.KubeletCAFile) > 0 {\n      config.Client.TLSClientConfig.CAFile = o.KubeletCAFile\n      config.Client.TLSClientConfig.CAData = nil\n   }\n   if len(o.KubeletClientCertFile) > 0 {\n      config.Client.TLSClientConfig.CertFile = o.KubeletClientCertFile\n      config.Client.TLSClientConfig.CertData = nil\n   }\n   if len(o.KubeletClientKeyFile) > 0 {\n      config.Client.TLSClientConfig.KeyFile = o.KubeletClientKeyFile\n      config.Client.TLSClientConfig.KeyData = nil\n   }\n   return config\n}\n\nfunc (o KubeletClientOptions) addressResolverConfig() []corev1.NodeAddressType {\n   // 设置访问node的ip优先级（node当中保存着各种address，其中包含InternalIP、ExternalIP等）\n   addrPriority := make([]corev1.NodeAddressType, len(o.KubeletPreferredAddressTypes))\n   for i, addrType := range o.KubeletPreferredAddressTypes {\n      addrPriority[i] = corev1.NodeAddressType(addrType)\n   }\n   return addrPriority\n}\n```\n\n这个参数解析可以在 cmd/metrics-server/app/options/kubelet_client.go#AddFlags当中看到\n\n```go\n// 优先使用 InternalIP 来访问 kubelet，这样可以避免节点名称没有 DNS 解析记录时，通过节点名称调用节点 kubelet API 失败的情况\nfs.StringSliceVar(&o.KubeletPreferredAddressTypes, \"kubelet-preferred-address-types\", o.KubeletPreferredAddressTypes, \"The priority of node address types to use when determining which address to use to connect to a particular node\")\n```\n\n\n\n### 3.2 config.Complete()\n\n`config.Complete()` 是根据配置信息去实例化了一些对象，其中包括：\n\n- Pod Informer\n- Node Informer\n- 指标抓取器\n- 指标存储器（这里的存储器只是一个内存型的简单存储，只保留最近的一次指标，其他历史指标不做持久化）\n- 还有kubernetes aggregate api 最常见的`genericServer`\n\n```go\nfunc (c Config) Complete() (*server, error) {\n   var labelRequirement []labels.Requirement\n\n   podInformerFactory, err := runningPodMetadataInformer(c.Rest)\n   if err != nil {\n      return nil, err\n   }\n   // 生成Pod的Informer\n   podInformer := podInformerFactory.ForResource(corev1.SchemeGroupVersion.WithResource(\"pods\"))\n   informer, err := informerFactory(c.Rest)\n   if err != nil {\n      return nil, err\n   }\n   kubeletClient, err := resource.NewForConfig(c.Kubelet)\n   if err != nil {\n      return nil, fmt.Errorf(\"unable to construct a client to connect to the kubelets: %v\", err)\n   }\n   // 生成Node的Informer\n   nodes := informer.Core().V1().Nodes()\n   ns := strings.TrimSpace(c.NodeSelector)\n   if ns != \"\" {\n      labelRequirement, err = labels.ParseToRequirements(ns)\n      if err != nil {\n         return nil, err\n      }\n   }\n   // 指标抓取器\n   scrape := scraper.NewScraper(nodes.Lister(), kubeletClient, c.ScrapeTimeout, labelRequirement)\n\n   // Disable default metrics handler and create custom one\n   c.Apiserver.EnableMetrics = false\n   metricsHandler, err := c.metricsHandler()\n   if err != nil {\n      return nil, err\n   }\n   genericServer, err := c.Apiserver.Complete(nil).New(\"metrics-server\", genericapiserver.NewEmptyDelegate())\n   if err != nil {\n      return nil, err\n   }\n   genericServer.Handler.NonGoRestfulMux.HandleFunc(\"/metrics\", metricsHandler)\n\n   store := storage.NewStorage(c.MetricResolution)\n   if err := api.Install(store, podInformer.Lister(), nodes.Lister(), genericServer, labelRequirement); err != nil {\n      return nil, err\n   }\n\n   s := NewServer(\n      nodes.Informer(),\n      podInformer.Informer(),\n      genericServer,\n      store,\n      scrape,\n      c.MetricResolution,\n   )\n   err = s.RegisterProbes(podInformerFactory)\n   if err != nil {\n      return nil, err\n   }\n   return s, nil\n}\n```\n\n\n\n### 3.3 RunUntil\n\n最终这里就是启动Node Informer、Pod Informer、指标抓取器、以及服务的启动（kubectl top node接口等等）\n\n```go\n// RunUntil starts background scraping goroutine and runs apiserver serving metrics.\n// 注：GenericAPIServer主要处理apiregistration.k8s.io组下的APIService资源请求\n// 如果是Metrics—Server的请求，那么也会转发到对应的服务，这里最终的一步就是启动Metrics—Server的GenericAPIServer\nfunc (s *server) RunUntil(stopCh <-chan struct{}) error {\n   ctx, cancel := context.WithCancel(context.Background())\n   defer cancel()\n\n   // Start informers\n   go s.nodes.Run(stopCh)\n   go s.pods.Run(stopCh)\n\n   // Ensure cache is up to date\n   ok := cache.WaitForCacheSync(stopCh, s.nodes.HasSynced)\n   if !ok {\n      return nil\n   }\n   ok = cache.WaitForCacheSync(stopCh, s.pods.HasSynced)\n   if !ok {\n      return nil\n   }\n\n   // Start serving API and scrape loop\n   go s.runScrape(ctx)\n   return s.GenericAPIServer.PrepareRun().Run(stopCh)\n}\n```\n\n\n\n## 4. 指标抓取\n\n指标抓取从上面我们可以看到是调用了`runScrape`\n\n```go\nfunc (s *server) runScrape(ctx context.Context) {\n   ticker := time.NewTicker(s.resolution)\n   defer ticker.Stop()\n   s.tick(ctx, time.Now())\n\n   for {\n      select {\n      case startTime := <-ticker.C:\n         s.tick(ctx, startTime)\n      case <-ctx.Done():\n         return\n      }\n   }\n}\n```\n\n而 `runScrape` 里面其实是调用了一个定时任务，其中启动了：\n\n- s.scraper.Scrape(ctx) 进行指标抓取\n- s.storage.Store(data) 对指标进行存储\n\n```go\n// tick 是指标抓取和存储的定时任务，通过s.scraper.Scrape(ctx)抓取，s.storage.Store(data)存储\nfunc (s *server) tick(ctx context.Context, startTime time.Time) {\n   s.tickStatusMux.Lock()\n   s.tickLastStart = startTime\n   s.tickStatusMux.Unlock()\n\n   ctx, cancelTimeout := context.WithTimeout(ctx, s.resolution)\n   defer cancelTimeout()\n\n   klog.V(6).InfoS(\"Scraping metrics\")\n   data := s.scraper.Scrape(ctx)\n\n   klog.V(6).InfoS(\"Storing metrics\")\n   s.storage.Store(data)\n\n   collectTime := time.Since(startTime)\n   tickDuration.Observe(float64(collectTime) / float64(time.Second))\n   klog.V(6).InfoS(\"Scraping cycle complete\")\n}\n```\n\n\n\n### 4.1 s.scraper.Scrape\n\n核心就是对node进行for，然后启动协程去抓取，可以看到每个协程会随机进行休眠，然后调用 collectNode 对接点进行抓取\n\n```go\nfunc (c *scraper) Scrape(baseCtx context.Context) *storage.MetricsBatch {\n   nodes, err := c.nodeLister.List(c.labelSelector)\n   if err != nil {\n      // report the error and continue on in case of partial results\n      klog.ErrorS(err, \"Failed to list nodes\")\n   }\n   klog.V(1).InfoS(\"Scraping metrics from nodes\", \"nodes\", klog.KObjSlice(nodes), \"nodeCount\", len(nodes), \"nodeSelector\", c.labelSelector)\n\n   responseChannel := make(chan *storage.MetricsBatch, len(nodes))\n   defer close(responseChannel)\n\n   startTime := myClock.Now()\n\n   // TODO(serathius): re-evaluate this code -- do we really need to stagger fetches like this?\n   delayMs := delayPerSourceMs * len(nodes)\n   if delayMs > maxDelayMs {\n      delayMs = maxDelayMs\n   }\n\n   for _, node := range nodes {\n      go func(node *corev1.Node) {\n         // Prevents network congestion.\n         // 每个协程随机sleep一段时间，防止几个协程同事发起请求而造成网络堵塞\n         sleepDuration := time.Duration(rand.Intn(delayMs)) * time.Millisecond\n         time.Sleep(sleepDuration)\n         // make the timeout a bit shorter to account for staggering, so we still preserve\n         // the overall timeout\n         ctx, cancelTimeout := context.WithTimeout(baseCtx, c.scrapeTimeout)\n         defer cancelTimeout()\n         klog.V(2).InfoS(\"Scraping node\", \"node\", klog.KObj(node))\n         m, err := c.collectNode(ctx, node)\n         if err != nil {\n            if errors.Is(err, context.DeadlineExceeded) {\n               klog.ErrorS(err, \"Failed to scrape node, timeout to access kubelet\", \"node\", klog.KObj(node), \"timeout\", c.scrapeTimeout)\n            } else {\n               klog.ErrorS(err, \"Failed to scrape node\", \"node\", klog.KObj(node))\n            }\n         }\n         responseChannel <- m\n      }(node)\n   }\n\t\n   res := &storage.MetricsBatch{\n      Nodes: map[string]storage.MetricsPoint{},\n      Pods:  map[apitypes.NamespacedName]storage.PodMetricsPoint{},\n   }\n\t // 这里是对指标重新分类筛选，Node纬度、Pod纬度\t\n   for range nodes {\n      srcBatch := <-responseChannel\n      if srcBatch == nil {\n         continue\n      }\n      for nodeName, nodeMetricsPoint := range srcBatch.Nodes {\n         if _, nodeFind := res.Nodes[nodeName]; nodeFind {\n            klog.ErrorS(nil, \"Got duplicate node point\", \"node\", klog.KRef(\"\", nodeName))\n            continue\n         }\n         res.Nodes[nodeName] = nodeMetricsPoint\n      }\n      for podRef, podMetricsPoint := range srcBatch.Pods {\n         if _, podFind := res.Pods[podRef]; podFind {\n            klog.ErrorS(nil, \"Got duplicate pod point\", \"pod\", klog.KRef(podRef.Namespace, podRef.Name))\n            continue\n         }\n         res.Pods[podRef] = podMetricsPoint\n      }\n   }\n\n   klog.V(1).InfoS(\"Scrape finished\", \"duration\", myClock.Since(startTime), \"nodeCount\", len(res.Nodes), \"podCount\", len(res.Pods))\n   return res\n}\n```\n\ncollectNode 实际上就是调用kubeletClient的GetMetrics\n\n```go\n// 实际上就是调用GetMetrics接口\nfunc (c *scraper) collectNode(ctx context.Context, node *corev1.Node) (*storage.MetricsBatch, error) {\n   startTime := myClock.Now()\n   defer func() {\n      requestDuration.WithLabelValues(node.Name).Observe(float64(myClock.Since(startTime)) / float64(time.Second))\n      lastRequestTime.WithLabelValues(node.Name).Set(float64(myClock.Now().Unix()))\n   }()\n   ms, err := c.kubeletClient.GetMetrics(ctx, node)\n\n   if err != nil {\n      requestTotal.WithLabelValues(\"false\").Inc()\n      return nil, err\n   }\n   requestTotal.WithLabelValues(\"true\").Inc()\n   return ms, nil\n}\n\n// GetMetrics implements client.KubeletMetricsGetter\nfunc (kc *kubeletClient) GetMetrics(ctx context.Context, node *corev1.Node) (*storage.MetricsBatch, error) {\n\tport := kc.defaultPort\n\tnodeStatusPort := int(node.Status.DaemonEndpoints.KubeletEndpoint.Port)\n\tif kc.useNodeStatusPort && nodeStatusPort != 0 {\n\t\tport = nodeStatusPort\n\t}\n\taddr, err := kc.addrResolver.NodeAddress(node)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\turl := url.URL{\n\t\tScheme: kc.scheme,\n\t\tHost:   net.JoinHostPort(addr, strconv.Itoa(port)),\n\t\tPath:   \"/metrics/resource\",\n\t}\n\treturn kc.getMetrics(ctx, url.String(), node.Name)\n}\n\n//nolint:staticcheck // to disable SA6002 (argument should be pointer-like to avoid allocations)\nfunc (kc *kubeletClient) getMetrics(ctx context.Context, url, nodeName string) (*storage.MetricsBatch, error) {\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\trequestTime := time.Now()\n\tresponse, err := kc.client.Do(req.WithContext(ctx))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"request failed, status: %q\", response.Status)\n\t}\n\tb := kc.buffers.Get().([]byte)\n\tbuf := bytes.NewBuffer(b)\n\tbuf.Reset()\n\t_, err = io.Copy(buf, response.Body)\n\tif err != nil {\n\t\tkc.buffers.Put(b)\n\t\treturn nil, fmt.Errorf(\"failed to read response body - %v\", err)\n\t}\n\tb = buf.Bytes()\n\tms, err := decodeBatch(b, requestTime, nodeName)\n\tkc.buffers.Put(b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn ms, nil\n}\n```\n\n\n\n### 4.2 s.storage.Store\n\n存储是将Node、Pod区分开来存储的，因为不需要记录历史继续，所以也比较简单，基本逻辑就是遍历指标，查看是否存在，不存在就直接怼进去新的，存在的话就比较一下指标的时间，如果是新的，就覆盖原来的值。\n\n```go\nfunc (s *storage) Store(batch *MetricsBatch) {\n   s.mu.Lock()\n   defer s.mu.Unlock()\n   s.nodes.Store(batch)\n   s.pods.Store(batch)\n}\n```\n\n节点存储的数据结构，看到last和prev，其实就知道这玩意就是链表存储方式\n\n```go\n// nodeStorage stores last two node metric batches and calculates cpu & memory usage\n//\n// This implementation only stores metric points if they are newer than the\n// points already stored and the cpuUsageOverTime function used to handle\n// cumulative metrics assumes that the time window is different from 0.\ntype nodeStorage struct {\n   // last stores node metric points from last scrape\n   last map[string]MetricsPoint\n   // prev stores node metric points from scrape preceding the last one.\n   // Points timestamp should proceed the corresponding points from last.\n   prev map[string]MetricsPoint\n}\n\nfunc (s *nodeStorage) Store(batch *MetricsBatch) {\n\tlastNodes := make(map[string]MetricsPoint, len(batch.Nodes))\n\tprevNodes := make(map[string]MetricsPoint, len(batch.Nodes))\n\tfor nodeName, newPoint := range batch.Nodes {\n\t\tif _, exists := lastNodes[nodeName]; exists {\n\t\t\tklog.ErrorS(nil, \"Got duplicate node point\", \"node\", klog.KRef(\"\", nodeName))\n\t\t\tcontinue\n\t\t}\n\t\tlastNodes[nodeName] = newPoint\n\n\t\tif lastNode, found := s.last[nodeName]; found {\n\t\t\t// If new point is different then one already stored\n\t\t\tif newPoint.Timestamp.After(lastNode.Timestamp) {\n\t\t\t\t// Move stored point to previous\n\t\t\t\tprevNodes[nodeName] = lastNode\n\t\t\t} else if prevPoint, found := s.prev[nodeName]; found {\n\t\t\t\tif prevPoint.Timestamp.Before(newPoint.Timestamp) {\n\t\t\t\t\t// Keep previous point\n\t\t\t\t\tprevNodes[nodeName] = prevPoint\n\t\t\t\t} else {\n\t\t\t\t\tklog.V(2).InfoS(\"Found new node metrics point is older than stored previous, drop previous\",\n\t\t\t\t\t\t\"node\", nodeName,\n\t\t\t\t\t\t\"previousTimestamp\", prevPoint.Timestamp,\n\t\t\t\t\t\t\"timestamp\", newPoint.Timestamp)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\ts.last = lastNodes\n\ts.prev = prevNodes\n\n\t// Only count last for which metrics can be returned.\n  // 只计算最后可以返回的指标\n\tpointsStored.WithLabelValues(\"node\").Set(float64(len(prevNodes)))\n}\n```\n\nPod的也是大同小异\n\n```go\n// nodeStorage stores last two pod metric batches and calculates cpu & memory usage\n//\n// This implementation only stores metric points if they are newer than the\n// points already stored and the cpuUsageOverTime function used to handle\n// cumulative metrics assumes that the time window is different from 0.\ntype podStorage struct {\n\t// last stores pod metric points from last scrape\n\tlast map[apitypes.NamespacedName]PodMetricsPoint\n\t// prev stores pod metric points from scrape preceding the last one.\n\t// Points timestamp should proceed the corresponding points from last and have same start time (no restart between them).\n\tprev map[apitypes.NamespacedName]PodMetricsPoint\n\t// scrape period of metrics server\n\tmetricResolution time.Duration\n}\n```\n\n可能是出于Pod的数量可能较多，还需要判断一下指标的抓取周期，也就是字段 metricResolution，使用位置是在对新的 Point 的时间戳以及起始时间的差值进行比较。\n\n```go\nnewPoint.Timestamp.Sub(newPoint.StartTime) < s.metricResolution\n```\n\n```go\nfunc (s *podStorage) Store(newPods *MetricsBatch) {\n   lastPods := make(map[apitypes.NamespacedName]PodMetricsPoint, len(newPods.Pods))\n   prevPods := make(map[apitypes.NamespacedName]PodMetricsPoint, len(newPods.Pods))\n   var containerCount int\n   for podRef, newPod := range newPods.Pods {\n      podRef := apitypes.NamespacedName{Name: podRef.Name, Namespace: podRef.Namespace}\n      if _, found := lastPods[podRef]; found {\n         klog.ErrorS(nil, \"Got duplicate pod point\", \"pod\", klog.KRef(podRef.Namespace, podRef.Name))\n         continue\n      }\n\n      newLastPod := PodMetricsPoint{Containers: make(map[string]MetricsPoint, len(newPod.Containers))}\n      newPrevPod := PodMetricsPoint{Containers: make(map[string]MetricsPoint, len(newPod.Containers))}\n      for containerName, newPoint := range newPod.Containers {\n         if _, exists := newLastPod.Containers[containerName]; exists {\n            klog.ErrorS(nil, \"Got duplicate Container point\", \"container\", containerName, \"pod\", klog.KRef(podRef.Namespace, podRef.Name))\n            continue\n         }\n         newLastPod.Containers[containerName] = newPoint\n         if newPoint.StartTime.Before(newPoint.Timestamp) && newPoint.Timestamp.Sub(newPoint.StartTime) < s.metricResolution && newPoint.Timestamp.Sub(newPoint.StartTime) >= freshContainerMinMetricsResolution {\n            copied := newPoint\n            copied.Timestamp = newPoint.StartTime\n            copied.CumulativeCpuUsed = 0\n            newPrevPod.Containers[containerName] = copied\n         } else if lastPod, found := s.last[podRef]; found {\n            // Keep previous metric point if newPoint has not restarted (new metric start time < stored timestamp)\n            if lastContainer, found := lastPod.Containers[containerName]; found && newPoint.StartTime.Before(lastContainer.Timestamp) {\n               // If new point is different then one already stored\n               if newPoint.Timestamp.After(lastContainer.Timestamp) {\n                  // Move stored point to previous\n                  newPrevPod.Containers[containerName] = lastContainer\n               } else if prevPod, found := s.prev[podRef]; found {\n                  if prevPod.Containers[containerName].Timestamp.Before(newPoint.Timestamp) {\n                     // Keep previous point\n                     newPrevPod.Containers[containerName] = prevPod.Containers[containerName]\n                  } else {\n                     klog.V(2).InfoS(\"Found new containerName metrics point is older than stored previous , drop previous\",\n                        \"containerName\", containerName,\n                        \"pod\", klog.KRef(podRef.Namespace, podRef.Name),\n                        \"previousTimestamp\", prevPod.Containers[containerName].Timestamp,\n                        \"timestamp\", newPoint.Timestamp)\n                  }\n               }\n            }\n         }\n      }\n      containerPoints := len(newPrevPod.Containers)\n      if containerPoints > 0 {\n         prevPods[podRef] = newPrevPod\n      }\n      lastPods[podRef] = newLastPod\n\n      // Only count containers for which metrics can be returned.\n      containerCount += containerPoints\n   }\n   s.last = lastPods\n   s.prev = prevPods\n\n   pointsStored.WithLabelValues(\"container\").Set(float64(containerCount))\n}\n```","source":"_posts/metrics-server-source-code-appreciation.md","raw":"---\ntitle: metrics-server源码赏析\ndate: 2023/02/03\nupdated: 2023/02/03\ntype:\ncomments:\ndescription: 最近刚好在做HPA，就想着先把kubernetes使用metrics-server的源码先看看，毕竟这也是HPA能够实现的依据，metrics-server主要也是通过aggregate api向其他组件提供集群当中的pod和node的cpu跟内存监控指标的。\nkeywords: metrics-server\n---\n\n\n## 1.前言\n\n最近刚好在做HPA，就想着先把kubernetes使用metrics-server的源码先看看，毕竟这也是HPA能够实现的依据，metrics-server主要也是通过aggregate api向其他组件提供集群当中的pod和node的cpu跟内存监控指标的。\n\n\n\n## 2.数据结构\n\n抓取接口是通过\n\n```go\n// https://github.com/kubernetes-sigs/metrics-server/blob/83b2e01f9825849ae5f562e47aa1a4178b5d06e5/pkg/scraper/interface.go#L24\ntype Scraper interface {\n\tScrape(ctx context.Context) *storage.MetricsBatch\n}\n```\n\n从接口我们可以看到返回的是，storage.MetricsBatch，我们可以从源码当中的mock数据窥探出数据的大概模样\n\n```go\n// https://github.com/kubernetes-sigs/metrics-server/blob/83b2e01f9825849ae5f562e47aa1a4178b5d06e5/pkg/server/server_test.go#L47\nBeforeEach(func() {\n\t\tresolution = 60 * time.Second\n\t\tscraper = &scraperMock{\n\t\t\tresult: &storage.MetricsBatch{\n\t\t\t\tNodes: map[string]storage.MetricsPoint{\n\t\t\t\t\t\"node1\": {\n\t\t\t\t\t\tTimestamp:         time.Now(),\n\t\t\t\t\t\tCumulativeCpuUsed: 0,\n\t\t\t\t\t\tMemoryUsage:       0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\tstore = &storageMock{}\n\t\tserver = NewServer(nil, nil, nil, store, scraper, resolution)\n\t})\n```\n\n\n\n## 3.启动流程\n\n![整体流程图](/static/image/notes/2023/02/20/整体流程图.png)\n\n`main`函数就不画出来了，跟其他kubernetes系列项目一样，都是使用cobra来启动的，然后导向到NewMetricsServerCommand\n\n```go\n// NewMetricsServerCommand provides a CLI handler for the metrics server entrypoint\nfunc NewMetricsServerCommand(stopCh <-chan struct{}) *cobra.Command {\n   opts := options.NewOptions()\n   cmd := &cobra.Command{\n      Short: \"Launch metrics-server\",\n      Long:  \"Launch metrics-server\",\n      RunE: func(c *cobra.Command, args []string) error {\n         if err := runCommand(opts, stopCh); err != nil {\n            return err\n         }\n         return nil\n      },\n   }\n   fs := cmd.Flags()\n   nfs := opts.Flags()\n   for _, f := range nfs.FlagSets {\n      fs.AddFlagSet(f)\n   }\n   local := flag.NewFlagSet(os.Args[0], flag.ExitOnError)\n   logs.AddGoFlags(local)\n   nfs.FlagSet(\"logging\").AddGoFlagSet(local)\n\n   usageFmt := \"Usage:\\n  %s\\n\"\n   cols, _, _ := term.TerminalSize(cmd.OutOrStdout())\n   cmd.SetUsageFunc(func(cmd *cobra.Command) error {\n      fmt.Fprintf(cmd.OutOrStderr(), usageFmt, cmd.UseLine())\n      cliflag.PrintSections(cmd.OutOrStderr(), nfs, cols)\n      return nil\n   })\n   cmd.SetHelpFunc(func(cmd *cobra.Command, args []string) {\n      fmt.Fprintf(cmd.OutOrStdout(), \"%s\\n\\n\"+usageFmt, cmd.Long, cmd.UseLine())\n      cliflag.PrintSections(cmd.OutOrStdout(), nfs, cols)\n   })\n   fs.AddGoFlagSet(local)\n   return cmd\n}\n```\n\n真正的运行都是包含在`runCommand`当中，其他就是关于参数的解析校验类的。`runCommand`当中主要就是三步\n\n1. 根据配置文件、启动参数、默认参数生成启动的配置信息\n2. 根据配置信息完成启动的一些对象实例化\n3. 真正启动服务\n\n```go\nfunc runCommand(o *options.Options, stopCh <-chan struct{}) error {\n   if o.ShowVersion {\n      fmt.Println(version.Get().GitVersion)\n      os.Exit(0)\n   }\n\n   errors := o.Validate()\n   if len(errors) > 0 {\n      return errors[0]\n   }\n   // 生成metric-server的server端配置\n   config, err := o.ServerConfig()\n\n   if err != nil {\n      return err\n   }\n\n   // 完成配置注入\n   s, err := config.Complete()\n\n   if err != nil {\n      return err\n   }\n   // 真正启动服务\n   return s.RunUntil(stopCh)\n}\n```\n\n\n\n### 3.1 ServerConfig\n\n`ServerConfig` 就是生成配置文件的，其中有个Client端的配置生成，重点主要看两个\n\n- APIServer的配置生成\n- Client端的配置生成\n\n```go\nfunc (o Options) ServerConfig() (*server.Config, error) {\n   apiserver, err := o.ApiserverConfig()\n   if err != nil {\n      return nil, err\n   }\n   restConfig, err := o.restConfig()\n   if err != nil {\n      return nil, err\n   }\n   return &server.Config{\n      Apiserver: apiserver,\n      Rest:      restConfig,\n      // 生成Client端的配置\n      Kubelet:          o.KubeletClient.Config(restConfig),\n      MetricResolution: o.MetricResolution,\n      ScrapeTimeout:    o.KubeletClient.KubeletRequestTimeout,\n      NodeSelector:     o.KubeletClient.NodeSelector,\n   }, nil\n}\n```\n\n**APIServer的配置生成**\n\n```go\nfunc (o Options) ApiserverConfig() (*genericapiserver.Config, error) {\n   // 检查证书是否可以读取，如果不可以则尝试生成自签名证书\n   if err := o.SecureServing.MaybeDefaultWithSelfSignedCerts(\"localhost\", nil, []net.IP{net.ParseIP(\"127.0.0.1\")}); err != nil {\n      return nil, fmt.Errorf(\"error creating self-signed certificates: %v\", err)\n   }\n\n   serverConfig := genericapiserver.NewConfig(api.Codecs)\n   if err := o.SecureServing.ApplyTo(&serverConfig.SecureServing, &serverConfig.LoopbackClientConfig); err != nil {\n      return nil, err\n   }\n\n   if !o.DisableAuthForTesting {\n      if err := o.Authentication.ApplyTo(&serverConfig.Authentication, serverConfig.SecureServing, nil); err != nil {\n         return nil, err\n      }\n      if err := o.Authorization.ApplyTo(&serverConfig.Authorization); err != nil {\n         return nil, err\n      }\n   }\n\n   if err := o.Audit.ApplyTo(serverConfig); err != nil {\n      return nil, err\n   }\n\n   versionGet := version.Get()\n   serverConfig.Version = &versionGet\n   // enable OpenAPI schemas\n   // 暴露OpenAPI断点\n   serverConfig.OpenAPIConfig = genericapiserver.DefaultOpenAPIConfig(generatedopenapi.GetOpenAPIDefinitions, openapinamer.NewDefinitionNamer(api.Scheme))\n   serverConfig.OpenAPIConfig.Info.Title = \"Kubernetes metrics-server\"\n   serverConfig.OpenAPIConfig.Info.Version = strings.Split(serverConfig.Version.String(), \"-\")[0] // TODO(directxman12): remove this once autosetting this doesn't require security definitions\n\n   return serverConfig, nil\n}\n```\n\n**Client端的配置生成**\n\n关于`metrics-server`访问`node`的优先级配置，就在`Client`端的配置里面了。\n\n```go\n// Config 生成metric-server的client端配置\nfunc (o KubeletClientOptions) Config(restConfig *rest.Config) *client.KubeletClientConfig {\n   config := &client.KubeletClientConfig{\n      Scheme:      \"https\",\n      DefaultPort: o.KubeletPort,\n      // 节点访问优先级\n      AddressTypePriority: o.addressResolverConfig(),\n      UseNodeStatusPort:   o.KubeletUseNodeStatusPort,\n      Client:              *rest.CopyConfig(restConfig),\n   }\n   if o.DeprecatedCompletelyInsecureKubelet {\n      config.Scheme = \"http\"\n      config.Client = *rest.AnonymousClientConfig(&config.Client) // don't use auth to avoid leaking auth details to insecure endpoints\n      config.Client.TLSClientConfig = rest.TLSClientConfig{}      // empty TLS config --> no TLS\n   }\n   if o.InsecureKubeletTLS {\n      config.Client.TLSClientConfig.Insecure = true\n      config.Client.TLSClientConfig.CAData = nil\n      config.Client.TLSClientConfig.CAFile = \"\"\n   }\n   if len(o.KubeletCAFile) > 0 {\n      config.Client.TLSClientConfig.CAFile = o.KubeletCAFile\n      config.Client.TLSClientConfig.CAData = nil\n   }\n   if len(o.KubeletClientCertFile) > 0 {\n      config.Client.TLSClientConfig.CertFile = o.KubeletClientCertFile\n      config.Client.TLSClientConfig.CertData = nil\n   }\n   if len(o.KubeletClientKeyFile) > 0 {\n      config.Client.TLSClientConfig.KeyFile = o.KubeletClientKeyFile\n      config.Client.TLSClientConfig.KeyData = nil\n   }\n   return config\n}\n\nfunc (o KubeletClientOptions) addressResolverConfig() []corev1.NodeAddressType {\n   // 设置访问node的ip优先级（node当中保存着各种address，其中包含InternalIP、ExternalIP等）\n   addrPriority := make([]corev1.NodeAddressType, len(o.KubeletPreferredAddressTypes))\n   for i, addrType := range o.KubeletPreferredAddressTypes {\n      addrPriority[i] = corev1.NodeAddressType(addrType)\n   }\n   return addrPriority\n}\n```\n\n这个参数解析可以在 cmd/metrics-server/app/options/kubelet_client.go#AddFlags当中看到\n\n```go\n// 优先使用 InternalIP 来访问 kubelet，这样可以避免节点名称没有 DNS 解析记录时，通过节点名称调用节点 kubelet API 失败的情况\nfs.StringSliceVar(&o.KubeletPreferredAddressTypes, \"kubelet-preferred-address-types\", o.KubeletPreferredAddressTypes, \"The priority of node address types to use when determining which address to use to connect to a particular node\")\n```\n\n\n\n### 3.2 config.Complete()\n\n`config.Complete()` 是根据配置信息去实例化了一些对象，其中包括：\n\n- Pod Informer\n- Node Informer\n- 指标抓取器\n- 指标存储器（这里的存储器只是一个内存型的简单存储，只保留最近的一次指标，其他历史指标不做持久化）\n- 还有kubernetes aggregate api 最常见的`genericServer`\n\n```go\nfunc (c Config) Complete() (*server, error) {\n   var labelRequirement []labels.Requirement\n\n   podInformerFactory, err := runningPodMetadataInformer(c.Rest)\n   if err != nil {\n      return nil, err\n   }\n   // 生成Pod的Informer\n   podInformer := podInformerFactory.ForResource(corev1.SchemeGroupVersion.WithResource(\"pods\"))\n   informer, err := informerFactory(c.Rest)\n   if err != nil {\n      return nil, err\n   }\n   kubeletClient, err := resource.NewForConfig(c.Kubelet)\n   if err != nil {\n      return nil, fmt.Errorf(\"unable to construct a client to connect to the kubelets: %v\", err)\n   }\n   // 生成Node的Informer\n   nodes := informer.Core().V1().Nodes()\n   ns := strings.TrimSpace(c.NodeSelector)\n   if ns != \"\" {\n      labelRequirement, err = labels.ParseToRequirements(ns)\n      if err != nil {\n         return nil, err\n      }\n   }\n   // 指标抓取器\n   scrape := scraper.NewScraper(nodes.Lister(), kubeletClient, c.ScrapeTimeout, labelRequirement)\n\n   // Disable default metrics handler and create custom one\n   c.Apiserver.EnableMetrics = false\n   metricsHandler, err := c.metricsHandler()\n   if err != nil {\n      return nil, err\n   }\n   genericServer, err := c.Apiserver.Complete(nil).New(\"metrics-server\", genericapiserver.NewEmptyDelegate())\n   if err != nil {\n      return nil, err\n   }\n   genericServer.Handler.NonGoRestfulMux.HandleFunc(\"/metrics\", metricsHandler)\n\n   store := storage.NewStorage(c.MetricResolution)\n   if err := api.Install(store, podInformer.Lister(), nodes.Lister(), genericServer, labelRequirement); err != nil {\n      return nil, err\n   }\n\n   s := NewServer(\n      nodes.Informer(),\n      podInformer.Informer(),\n      genericServer,\n      store,\n      scrape,\n      c.MetricResolution,\n   )\n   err = s.RegisterProbes(podInformerFactory)\n   if err != nil {\n      return nil, err\n   }\n   return s, nil\n}\n```\n\n\n\n### 3.3 RunUntil\n\n最终这里就是启动Node Informer、Pod Informer、指标抓取器、以及服务的启动（kubectl top node接口等等）\n\n```go\n// RunUntil starts background scraping goroutine and runs apiserver serving metrics.\n// 注：GenericAPIServer主要处理apiregistration.k8s.io组下的APIService资源请求\n// 如果是Metrics—Server的请求，那么也会转发到对应的服务，这里最终的一步就是启动Metrics—Server的GenericAPIServer\nfunc (s *server) RunUntil(stopCh <-chan struct{}) error {\n   ctx, cancel := context.WithCancel(context.Background())\n   defer cancel()\n\n   // Start informers\n   go s.nodes.Run(stopCh)\n   go s.pods.Run(stopCh)\n\n   // Ensure cache is up to date\n   ok := cache.WaitForCacheSync(stopCh, s.nodes.HasSynced)\n   if !ok {\n      return nil\n   }\n   ok = cache.WaitForCacheSync(stopCh, s.pods.HasSynced)\n   if !ok {\n      return nil\n   }\n\n   // Start serving API and scrape loop\n   go s.runScrape(ctx)\n   return s.GenericAPIServer.PrepareRun().Run(stopCh)\n}\n```\n\n\n\n## 4. 指标抓取\n\n指标抓取从上面我们可以看到是调用了`runScrape`\n\n```go\nfunc (s *server) runScrape(ctx context.Context) {\n   ticker := time.NewTicker(s.resolution)\n   defer ticker.Stop()\n   s.tick(ctx, time.Now())\n\n   for {\n      select {\n      case startTime := <-ticker.C:\n         s.tick(ctx, startTime)\n      case <-ctx.Done():\n         return\n      }\n   }\n}\n```\n\n而 `runScrape` 里面其实是调用了一个定时任务，其中启动了：\n\n- s.scraper.Scrape(ctx) 进行指标抓取\n- s.storage.Store(data) 对指标进行存储\n\n```go\n// tick 是指标抓取和存储的定时任务，通过s.scraper.Scrape(ctx)抓取，s.storage.Store(data)存储\nfunc (s *server) tick(ctx context.Context, startTime time.Time) {\n   s.tickStatusMux.Lock()\n   s.tickLastStart = startTime\n   s.tickStatusMux.Unlock()\n\n   ctx, cancelTimeout := context.WithTimeout(ctx, s.resolution)\n   defer cancelTimeout()\n\n   klog.V(6).InfoS(\"Scraping metrics\")\n   data := s.scraper.Scrape(ctx)\n\n   klog.V(6).InfoS(\"Storing metrics\")\n   s.storage.Store(data)\n\n   collectTime := time.Since(startTime)\n   tickDuration.Observe(float64(collectTime) / float64(time.Second))\n   klog.V(6).InfoS(\"Scraping cycle complete\")\n}\n```\n\n\n\n### 4.1 s.scraper.Scrape\n\n核心就是对node进行for，然后启动协程去抓取，可以看到每个协程会随机进行休眠，然后调用 collectNode 对接点进行抓取\n\n```go\nfunc (c *scraper) Scrape(baseCtx context.Context) *storage.MetricsBatch {\n   nodes, err := c.nodeLister.List(c.labelSelector)\n   if err != nil {\n      // report the error and continue on in case of partial results\n      klog.ErrorS(err, \"Failed to list nodes\")\n   }\n   klog.V(1).InfoS(\"Scraping metrics from nodes\", \"nodes\", klog.KObjSlice(nodes), \"nodeCount\", len(nodes), \"nodeSelector\", c.labelSelector)\n\n   responseChannel := make(chan *storage.MetricsBatch, len(nodes))\n   defer close(responseChannel)\n\n   startTime := myClock.Now()\n\n   // TODO(serathius): re-evaluate this code -- do we really need to stagger fetches like this?\n   delayMs := delayPerSourceMs * len(nodes)\n   if delayMs > maxDelayMs {\n      delayMs = maxDelayMs\n   }\n\n   for _, node := range nodes {\n      go func(node *corev1.Node) {\n         // Prevents network congestion.\n         // 每个协程随机sleep一段时间，防止几个协程同事发起请求而造成网络堵塞\n         sleepDuration := time.Duration(rand.Intn(delayMs)) * time.Millisecond\n         time.Sleep(sleepDuration)\n         // make the timeout a bit shorter to account for staggering, so we still preserve\n         // the overall timeout\n         ctx, cancelTimeout := context.WithTimeout(baseCtx, c.scrapeTimeout)\n         defer cancelTimeout()\n         klog.V(2).InfoS(\"Scraping node\", \"node\", klog.KObj(node))\n         m, err := c.collectNode(ctx, node)\n         if err != nil {\n            if errors.Is(err, context.DeadlineExceeded) {\n               klog.ErrorS(err, \"Failed to scrape node, timeout to access kubelet\", \"node\", klog.KObj(node), \"timeout\", c.scrapeTimeout)\n            } else {\n               klog.ErrorS(err, \"Failed to scrape node\", \"node\", klog.KObj(node))\n            }\n         }\n         responseChannel <- m\n      }(node)\n   }\n\t\n   res := &storage.MetricsBatch{\n      Nodes: map[string]storage.MetricsPoint{},\n      Pods:  map[apitypes.NamespacedName]storage.PodMetricsPoint{},\n   }\n\t // 这里是对指标重新分类筛选，Node纬度、Pod纬度\t\n   for range nodes {\n      srcBatch := <-responseChannel\n      if srcBatch == nil {\n         continue\n      }\n      for nodeName, nodeMetricsPoint := range srcBatch.Nodes {\n         if _, nodeFind := res.Nodes[nodeName]; nodeFind {\n            klog.ErrorS(nil, \"Got duplicate node point\", \"node\", klog.KRef(\"\", nodeName))\n            continue\n         }\n         res.Nodes[nodeName] = nodeMetricsPoint\n      }\n      for podRef, podMetricsPoint := range srcBatch.Pods {\n         if _, podFind := res.Pods[podRef]; podFind {\n            klog.ErrorS(nil, \"Got duplicate pod point\", \"pod\", klog.KRef(podRef.Namespace, podRef.Name))\n            continue\n         }\n         res.Pods[podRef] = podMetricsPoint\n      }\n   }\n\n   klog.V(1).InfoS(\"Scrape finished\", \"duration\", myClock.Since(startTime), \"nodeCount\", len(res.Nodes), \"podCount\", len(res.Pods))\n   return res\n}\n```\n\ncollectNode 实际上就是调用kubeletClient的GetMetrics\n\n```go\n// 实际上就是调用GetMetrics接口\nfunc (c *scraper) collectNode(ctx context.Context, node *corev1.Node) (*storage.MetricsBatch, error) {\n   startTime := myClock.Now()\n   defer func() {\n      requestDuration.WithLabelValues(node.Name).Observe(float64(myClock.Since(startTime)) / float64(time.Second))\n      lastRequestTime.WithLabelValues(node.Name).Set(float64(myClock.Now().Unix()))\n   }()\n   ms, err := c.kubeletClient.GetMetrics(ctx, node)\n\n   if err != nil {\n      requestTotal.WithLabelValues(\"false\").Inc()\n      return nil, err\n   }\n   requestTotal.WithLabelValues(\"true\").Inc()\n   return ms, nil\n}\n\n// GetMetrics implements client.KubeletMetricsGetter\nfunc (kc *kubeletClient) GetMetrics(ctx context.Context, node *corev1.Node) (*storage.MetricsBatch, error) {\n\tport := kc.defaultPort\n\tnodeStatusPort := int(node.Status.DaemonEndpoints.KubeletEndpoint.Port)\n\tif kc.useNodeStatusPort && nodeStatusPort != 0 {\n\t\tport = nodeStatusPort\n\t}\n\taddr, err := kc.addrResolver.NodeAddress(node)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\turl := url.URL{\n\t\tScheme: kc.scheme,\n\t\tHost:   net.JoinHostPort(addr, strconv.Itoa(port)),\n\t\tPath:   \"/metrics/resource\",\n\t}\n\treturn kc.getMetrics(ctx, url.String(), node.Name)\n}\n\n//nolint:staticcheck // to disable SA6002 (argument should be pointer-like to avoid allocations)\nfunc (kc *kubeletClient) getMetrics(ctx context.Context, url, nodeName string) (*storage.MetricsBatch, error) {\n\treq, err := http.NewRequest(\"GET\", url, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\trequestTime := time.Now()\n\tresponse, err := kc.client.Do(req.WithContext(ctx))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer response.Body.Close()\n\tif response.StatusCode != http.StatusOK {\n\t\treturn nil, fmt.Errorf(\"request failed, status: %q\", response.Status)\n\t}\n\tb := kc.buffers.Get().([]byte)\n\tbuf := bytes.NewBuffer(b)\n\tbuf.Reset()\n\t_, err = io.Copy(buf, response.Body)\n\tif err != nil {\n\t\tkc.buffers.Put(b)\n\t\treturn nil, fmt.Errorf(\"failed to read response body - %v\", err)\n\t}\n\tb = buf.Bytes()\n\tms, err := decodeBatch(b, requestTime, nodeName)\n\tkc.buffers.Put(b)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn ms, nil\n}\n```\n\n\n\n### 4.2 s.storage.Store\n\n存储是将Node、Pod区分开来存储的，因为不需要记录历史继续，所以也比较简单，基本逻辑就是遍历指标，查看是否存在，不存在就直接怼进去新的，存在的话就比较一下指标的时间，如果是新的，就覆盖原来的值。\n\n```go\nfunc (s *storage) Store(batch *MetricsBatch) {\n   s.mu.Lock()\n   defer s.mu.Unlock()\n   s.nodes.Store(batch)\n   s.pods.Store(batch)\n}\n```\n\n节点存储的数据结构，看到last和prev，其实就知道这玩意就是链表存储方式\n\n```go\n// nodeStorage stores last two node metric batches and calculates cpu & memory usage\n//\n// This implementation only stores metric points if they are newer than the\n// points already stored and the cpuUsageOverTime function used to handle\n// cumulative metrics assumes that the time window is different from 0.\ntype nodeStorage struct {\n   // last stores node metric points from last scrape\n   last map[string]MetricsPoint\n   // prev stores node metric points from scrape preceding the last one.\n   // Points timestamp should proceed the corresponding points from last.\n   prev map[string]MetricsPoint\n}\n\nfunc (s *nodeStorage) Store(batch *MetricsBatch) {\n\tlastNodes := make(map[string]MetricsPoint, len(batch.Nodes))\n\tprevNodes := make(map[string]MetricsPoint, len(batch.Nodes))\n\tfor nodeName, newPoint := range batch.Nodes {\n\t\tif _, exists := lastNodes[nodeName]; exists {\n\t\t\tklog.ErrorS(nil, \"Got duplicate node point\", \"node\", klog.KRef(\"\", nodeName))\n\t\t\tcontinue\n\t\t}\n\t\tlastNodes[nodeName] = newPoint\n\n\t\tif lastNode, found := s.last[nodeName]; found {\n\t\t\t// If new point is different then one already stored\n\t\t\tif newPoint.Timestamp.After(lastNode.Timestamp) {\n\t\t\t\t// Move stored point to previous\n\t\t\t\tprevNodes[nodeName] = lastNode\n\t\t\t} else if prevPoint, found := s.prev[nodeName]; found {\n\t\t\t\tif prevPoint.Timestamp.Before(newPoint.Timestamp) {\n\t\t\t\t\t// Keep previous point\n\t\t\t\t\tprevNodes[nodeName] = prevPoint\n\t\t\t\t} else {\n\t\t\t\t\tklog.V(2).InfoS(\"Found new node metrics point is older than stored previous, drop previous\",\n\t\t\t\t\t\t\"node\", nodeName,\n\t\t\t\t\t\t\"previousTimestamp\", prevPoint.Timestamp,\n\t\t\t\t\t\t\"timestamp\", newPoint.Timestamp)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\ts.last = lastNodes\n\ts.prev = prevNodes\n\n\t// Only count last for which metrics can be returned.\n  // 只计算最后可以返回的指标\n\tpointsStored.WithLabelValues(\"node\").Set(float64(len(prevNodes)))\n}\n```\n\nPod的也是大同小异\n\n```go\n// nodeStorage stores last two pod metric batches and calculates cpu & memory usage\n//\n// This implementation only stores metric points if they are newer than the\n// points already stored and the cpuUsageOverTime function used to handle\n// cumulative metrics assumes that the time window is different from 0.\ntype podStorage struct {\n\t// last stores pod metric points from last scrape\n\tlast map[apitypes.NamespacedName]PodMetricsPoint\n\t// prev stores pod metric points from scrape preceding the last one.\n\t// Points timestamp should proceed the corresponding points from last and have same start time (no restart between them).\n\tprev map[apitypes.NamespacedName]PodMetricsPoint\n\t// scrape period of metrics server\n\tmetricResolution time.Duration\n}\n```\n\n可能是出于Pod的数量可能较多，还需要判断一下指标的抓取周期，也就是字段 metricResolution，使用位置是在对新的 Point 的时间戳以及起始时间的差值进行比较。\n\n```go\nnewPoint.Timestamp.Sub(newPoint.StartTime) < s.metricResolution\n```\n\n```go\nfunc (s *podStorage) Store(newPods *MetricsBatch) {\n   lastPods := make(map[apitypes.NamespacedName]PodMetricsPoint, len(newPods.Pods))\n   prevPods := make(map[apitypes.NamespacedName]PodMetricsPoint, len(newPods.Pods))\n   var containerCount int\n   for podRef, newPod := range newPods.Pods {\n      podRef := apitypes.NamespacedName{Name: podRef.Name, Namespace: podRef.Namespace}\n      if _, found := lastPods[podRef]; found {\n         klog.ErrorS(nil, \"Got duplicate pod point\", \"pod\", klog.KRef(podRef.Namespace, podRef.Name))\n         continue\n      }\n\n      newLastPod := PodMetricsPoint{Containers: make(map[string]MetricsPoint, len(newPod.Containers))}\n      newPrevPod := PodMetricsPoint{Containers: make(map[string]MetricsPoint, len(newPod.Containers))}\n      for containerName, newPoint := range newPod.Containers {\n         if _, exists := newLastPod.Containers[containerName]; exists {\n            klog.ErrorS(nil, \"Got duplicate Container point\", \"container\", containerName, \"pod\", klog.KRef(podRef.Namespace, podRef.Name))\n            continue\n         }\n         newLastPod.Containers[containerName] = newPoint\n         if newPoint.StartTime.Before(newPoint.Timestamp) && newPoint.Timestamp.Sub(newPoint.StartTime) < s.metricResolution && newPoint.Timestamp.Sub(newPoint.StartTime) >= freshContainerMinMetricsResolution {\n            copied := newPoint\n            copied.Timestamp = newPoint.StartTime\n            copied.CumulativeCpuUsed = 0\n            newPrevPod.Containers[containerName] = copied\n         } else if lastPod, found := s.last[podRef]; found {\n            // Keep previous metric point if newPoint has not restarted (new metric start time < stored timestamp)\n            if lastContainer, found := lastPod.Containers[containerName]; found && newPoint.StartTime.Before(lastContainer.Timestamp) {\n               // If new point is different then one already stored\n               if newPoint.Timestamp.After(lastContainer.Timestamp) {\n                  // Move stored point to previous\n                  newPrevPod.Containers[containerName] = lastContainer\n               } else if prevPod, found := s.prev[podRef]; found {\n                  if prevPod.Containers[containerName].Timestamp.Before(newPoint.Timestamp) {\n                     // Keep previous point\n                     newPrevPod.Containers[containerName] = prevPod.Containers[containerName]\n                  } else {\n                     klog.V(2).InfoS(\"Found new containerName metrics point is older than stored previous , drop previous\",\n                        \"containerName\", containerName,\n                        \"pod\", klog.KRef(podRef.Namespace, podRef.Name),\n                        \"previousTimestamp\", prevPod.Containers[containerName].Timestamp,\n                        \"timestamp\", newPoint.Timestamp)\n                  }\n               }\n            }\n         }\n      }\n      containerPoints := len(newPrevPod.Containers)\n      if containerPoints > 0 {\n         prevPods[podRef] = newPrevPod\n      }\n      lastPods[podRef] = newLastPod\n\n      // Only count containers for which metrics can be returned.\n      containerCount += containerPoints\n   }\n   s.last = lastPods\n   s.prev = prevPods\n\n   pointsStored.WithLabelValues(\"container\").Set(float64(containerCount))\n}\n```","slug":"metrics-server-source-code-appreciation","published":1,"_id":"clec5zvyo0000mp489a2w7xmk","layout":"post","photos":[],"link":"","content":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h2><p>最近刚好在做HPA，就想着先把kubernetes使用metrics-server的源码先看看，毕竟这也是HPA能够实现的依据，metrics-server主要也是通过aggregate api向其他组件提供集群当中的pod和node的cpu跟内存监控指标的。</p>\n<h2 id=\"2-数据结构\"><a href=\"#2-数据结构\" class=\"headerlink\" title=\"2.数据结构\"></a>2.数据结构</h2><p>抓取接口是通过</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/kubernetes-sigs/metrics-server/blob/83b2e01f9825849ae5f562e47aa1a4178b5d06e5/pkg/scraper/interface.go#L24</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Scraper <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tScrape(ctx context.Context) *storage.MetricsBatch</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从接口我们可以看到返回的是，storage.MetricsBatch，我们可以从源码当中的mock数据窥探出数据的大概模样</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/kubernetes-sigs/metrics-server/blob/83b2e01f9825849ae5f562e47aa1a4178b5d06e5/pkg/server/server_test.go#L47</span></span><br><span class=\"line\">BeforeEach(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tresolution = <span class=\"number\">60</span> * time.Second</span><br><span class=\"line\">\t\tscraper = &amp;scraperMock&#123;</span><br><span class=\"line\">\t\t\tresult: &amp;storage.MetricsBatch&#123;</span><br><span class=\"line\">\t\t\t\tNodes: <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]storage.MetricsPoint&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;node1&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\tTimestamp:         time.Now(),</span><br><span class=\"line\">\t\t\t\t\t\tCumulativeCpuUsed: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\t\t\tMemoryUsage:       <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstore = &amp;storageMock&#123;&#125;</span><br><span class=\"line\">\t\tserver = NewServer(<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, store, scraper, resolution)</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-启动流程\"><a href=\"#3-启动流程\" class=\"headerlink\" title=\"3.启动流程\"></a>3.启动流程</h2><p><img src=\"/static/image/notes/2023/02/20/%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"整体流程图\"></p>\n<p><code>main</code>函数就不画出来了，跟其他kubernetes系列项目一样，都是使用cobra来启动的，然后导向到NewMetricsServerCommand</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// NewMetricsServerCommand provides a CLI handler for the metrics server entrypoint</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewMetricsServerCommand</span><span class=\"params\">(stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span></span> *cobra.Command &#123;</span><br><span class=\"line\">   opts := options.NewOptions()</span><br><span class=\"line\">   cmd := &amp;cobra.Command&#123;</span><br><span class=\"line\">      Short: <span class=\"string\">&quot;Launch metrics-server&quot;</span>,</span><br><span class=\"line\">      Long:  <span class=\"string\">&quot;Launch metrics-server&quot;</span>,</span><br><span class=\"line\">      RunE: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *cobra.Command, args []<span class=\"type\">string</span>)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> err := runCommand(opts, stopCh); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> err</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fs := cmd.Flags()</span><br><span class=\"line\">   nfs := opts.Flags()</span><br><span class=\"line\">   <span class=\"keyword\">for</span> _, f := <span class=\"keyword\">range</span> nfs.FlagSets &#123;</span><br><span class=\"line\">      fs.AddFlagSet(f)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   local := flag.NewFlagSet(os.Args[<span class=\"number\">0</span>], flag.ExitOnError)</span><br><span class=\"line\">   logs.AddGoFlags(local)</span><br><span class=\"line\">   nfs.FlagSet(<span class=\"string\">&quot;logging&quot;</span>).AddGoFlagSet(local)</span><br><span class=\"line\"></span><br><span class=\"line\">   usageFmt := <span class=\"string\">&quot;Usage:\\n  %s\\n&quot;</span></span><br><span class=\"line\">   cols, _, _ := term.TerminalSize(cmd.OutOrStdout())</span><br><span class=\"line\">   cmd.SetUsageFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">      fmt.Fprintf(cmd.OutOrStderr(), usageFmt, cmd.UseLine())</span><br><span class=\"line\">      cliflag.PrintSections(cmd.OutOrStderr(), nfs, cols)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   cmd.SetHelpFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command, args []<span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">      fmt.Fprintf(cmd.OutOrStdout(), <span class=\"string\">&quot;%s\\n\\n&quot;</span>+usageFmt, cmd.Long, cmd.UseLine())</span><br><span class=\"line\">      cliflag.PrintSections(cmd.OutOrStdout(), nfs, cols)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   fs.AddGoFlagSet(local)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>真正的运行都是包含在<code>runCommand</code>当中，其他就是关于参数的解析校验类的。<code>runCommand</code>当中主要就是三步</p>\n<ol>\n<li>根据配置文件、启动参数、默认参数生成启动的配置信息</li>\n<li>根据配置信息完成启动的一些对象实例化</li>\n<li>真正启动服务</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">runCommand</span><span class=\"params\">(o *options.Options, stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> o.ShowVersion &#123;</span><br><span class=\"line\">      fmt.Println(version.Get().GitVersion)</span><br><span class=\"line\">      os.Exit(<span class=\"number\">0</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   errors := o.Validate()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(errors) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> errors[<span class=\"number\">0</span>]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 生成metric-server的server端配置</span></span><br><span class=\"line\">   config, err := o.ServerConfig()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 完成配置注入</span></span><br><span class=\"line\">   s, err := config.Complete()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 真正启动服务</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> s.RunUntil(stopCh)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-1-ServerConfig\"><a href=\"#3-1-ServerConfig\" class=\"headerlink\" title=\"3.1 ServerConfig\"></a>3.1 ServerConfig</h3><p><code>ServerConfig</code> 就是生成配置文件的，其中有个Client端的配置生成，重点主要看两个</p>\n<ul>\n<li>APIServer的配置生成</li>\n<li>Client端的配置生成</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o Options)</span></span> ServerConfig() (*server.Config, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">   apiserver, err := o.ApiserverConfig()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   restConfig, err := o.restConfig()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;server.Config&#123;</span><br><span class=\"line\">      Apiserver: apiserver,</span><br><span class=\"line\">      Rest:      restConfig,</span><br><span class=\"line\">      <span class=\"comment\">// 生成Client端的配置</span></span><br><span class=\"line\">      Kubelet:          o.KubeletClient.Config(restConfig),</span><br><span class=\"line\">      MetricResolution: o.MetricResolution,</span><br><span class=\"line\">      ScrapeTimeout:    o.KubeletClient.KubeletRequestTimeout,</span><br><span class=\"line\">      NodeSelector:     o.KubeletClient.NodeSelector,</span><br><span class=\"line\">   &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>APIServer的配置生成</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o Options)</span></span> ApiserverConfig() (*genericapiserver.Config, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 检查证书是否可以读取，如果不可以则尝试生成自签名证书</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := o.SecureServing.MaybeDefaultWithSelfSignedCerts(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"literal\">nil</span>, []net.IP&#123;net.ParseIP(<span class=\"string\">&quot;127.0.0.1&quot;</span>)&#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;error creating self-signed certificates: %v&quot;</span>, err)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   serverConfig := genericapiserver.NewConfig(api.Codecs)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := o.SecureServing.ApplyTo(&amp;serverConfig.SecureServing, &amp;serverConfig.LoopbackClientConfig); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> !o.DisableAuthForTesting &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := o.Authentication.ApplyTo(&amp;serverConfig.Authentication, serverConfig.SecureServing, <span class=\"literal\">nil</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := o.Authorization.ApplyTo(&amp;serverConfig.Authorization); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := o.Audit.ApplyTo(serverConfig); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   versionGet := version.Get()</span><br><span class=\"line\">   serverConfig.Version = &amp;versionGet</span><br><span class=\"line\">   <span class=\"comment\">// enable OpenAPI schemas</span></span><br><span class=\"line\">   <span class=\"comment\">// 暴露OpenAPI断点</span></span><br><span class=\"line\">   serverConfig.OpenAPIConfig = genericapiserver.DefaultOpenAPIConfig(generatedopenapi.GetOpenAPIDefinitions, openapinamer.NewDefinitionNamer(api.Scheme))</span><br><span class=\"line\">   serverConfig.OpenAPIConfig.Info.Title = <span class=\"string\">&quot;Kubernetes metrics-server&quot;</span></span><br><span class=\"line\">   serverConfig.OpenAPIConfig.Info.Version = strings.Split(serverConfig.Version.String(), <span class=\"string\">&quot;-&quot;</span>)[<span class=\"number\">0</span>] <span class=\"comment\">// TODO(directxman12): remove this once autosetting this doesn&#x27;t require security definitions</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> serverConfig, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Client端的配置生成</strong></p>\n<p>关于<code>metrics-server</code>访问<code>node</code>的优先级配置，就在<code>Client</code>端的配置里面了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Config 生成metric-server的client端配置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o KubeletClientOptions)</span></span> Config(restConfig *rest.Config) *client.KubeletClientConfig &#123;</span><br><span class=\"line\">   config := &amp;client.KubeletClientConfig&#123;</span><br><span class=\"line\">      Scheme:      <span class=\"string\">&quot;https&quot;</span>,</span><br><span class=\"line\">      DefaultPort: o.KubeletPort,</span><br><span class=\"line\">      <span class=\"comment\">// 节点访问优先级</span></span><br><span class=\"line\">      AddressTypePriority: o.addressResolverConfig(),</span><br><span class=\"line\">      UseNodeStatusPort:   o.KubeletUseNodeStatusPort,</span><br><span class=\"line\">      Client:              *rest.CopyConfig(restConfig),</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> o.DeprecatedCompletelyInsecureKubelet &#123;</span><br><span class=\"line\">      config.Scheme = <span class=\"string\">&quot;http&quot;</span></span><br><span class=\"line\">      config.Client = *rest.AnonymousClientConfig(&amp;config.Client) <span class=\"comment\">// don&#x27;t use auth to avoid leaking auth details to insecure endpoints</span></span><br><span class=\"line\">      config.Client.TLSClientConfig = rest.TLSClientConfig&#123;&#125;      <span class=\"comment\">// empty TLS config --&gt; no TLS</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> o.InsecureKubeletTLS &#123;</span><br><span class=\"line\">      config.Client.TLSClientConfig.Insecure = <span class=\"literal\">true</span></span><br><span class=\"line\">      config.Client.TLSClientConfig.CAData = <span class=\"literal\">nil</span></span><br><span class=\"line\">      config.Client.TLSClientConfig.CAFile = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(o.KubeletCAFile) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      config.Client.TLSClientConfig.CAFile = o.KubeletCAFile</span><br><span class=\"line\">      config.Client.TLSClientConfig.CAData = <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(o.KubeletClientCertFile) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      config.Client.TLSClientConfig.CertFile = o.KubeletClientCertFile</span><br><span class=\"line\">      config.Client.TLSClientConfig.CertData = <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(o.KubeletClientKeyFile) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      config.Client.TLSClientConfig.KeyFile = o.KubeletClientKeyFile</span><br><span class=\"line\">      config.Client.TLSClientConfig.KeyData = <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o KubeletClientOptions)</span></span> addressResolverConfig() []corev1.NodeAddressType &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 设置访问node的ip优先级（node当中保存着各种address，其中包含InternalIP、ExternalIP等）</span></span><br><span class=\"line\">   addrPriority := <span class=\"built_in\">make</span>([]corev1.NodeAddressType, <span class=\"built_in\">len</span>(o.KubeletPreferredAddressTypes))</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i, addrType := <span class=\"keyword\">range</span> o.KubeletPreferredAddressTypes &#123;</span><br><span class=\"line\">      addrPriority[i] = corev1.NodeAddressType(addrType)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> addrPriority</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个参数解析可以在 cmd/metrics-server/app/options/kubelet_client.go#AddFlags当中看到</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 优先使用 InternalIP 来访问 kubelet，这样可以避免节点名称没有 DNS 解析记录时，通过节点名称调用节点 kubelet API 失败的情况</span></span><br><span class=\"line\">fs.StringSliceVar(&amp;o.KubeletPreferredAddressTypes, <span class=\"string\">&quot;kubelet-preferred-address-types&quot;</span>, o.KubeletPreferredAddressTypes, <span class=\"string\">&quot;The priority of node address types to use when determining which address to use to connect to a particular node&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-2-config-Complete\"><a href=\"#3-2-config-Complete\" class=\"headerlink\" title=\"3.2 config.Complete()\"></a>3.2 config.Complete()</h3><p><code>config.Complete()</code> 是根据配置信息去实例化了一些对象，其中包括：</p>\n<ul>\n<li>Pod Informer</li>\n<li>Node Informer</li>\n<li>指标抓取器</li>\n<li>指标存储器（这里的存储器只是一个内存型的简单存储，只保留最近的一次指标，其他历史指标不做持久化）</li>\n<li>还有kubernetes aggregate api 最常见的<code>genericServer</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Config)</span></span> Complete() (*server, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> labelRequirement []labels.Requirement</span><br><span class=\"line\"></span><br><span class=\"line\">   podInformerFactory, err := runningPodMetadataInformer(c.Rest)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 生成Pod的Informer</span></span><br><span class=\"line\">   podInformer := podInformerFactory.ForResource(corev1.SchemeGroupVersion.WithResource(<span class=\"string\">&quot;pods&quot;</span>))</span><br><span class=\"line\">   informer, err := informerFactory(c.Rest)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   kubeletClient, err := resource.NewForConfig(c.Kubelet)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;unable to construct a client to connect to the kubelets: %v&quot;</span>, err)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 生成Node的Informer</span></span><br><span class=\"line\">   nodes := informer.Core().V1().Nodes()</span><br><span class=\"line\">   ns := strings.TrimSpace(c.NodeSelector)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ns != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">      labelRequirement, err = labels.ParseToRequirements(ns)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 指标抓取器</span></span><br><span class=\"line\">   scrape := scraper.NewScraper(nodes.Lister(), kubeletClient, c.ScrapeTimeout, labelRequirement)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Disable default metrics handler and create custom one</span></span><br><span class=\"line\">   c.Apiserver.EnableMetrics = <span class=\"literal\">false</span></span><br><span class=\"line\">   metricsHandler, err := c.metricsHandler()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   genericServer, err := c.Apiserver.Complete(<span class=\"literal\">nil</span>).New(<span class=\"string\">&quot;metrics-server&quot;</span>, genericapiserver.NewEmptyDelegate())</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   genericServer.Handler.NonGoRestfulMux.HandleFunc(<span class=\"string\">&quot;/metrics&quot;</span>, metricsHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">   store := storage.NewStorage(c.MetricResolution)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := api.Install(store, podInformer.Lister(), nodes.Lister(), genericServer, labelRequirement); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   s := NewServer(</span><br><span class=\"line\">      nodes.Informer(),</span><br><span class=\"line\">      podInformer.Informer(),</span><br><span class=\"line\">      genericServer,</span><br><span class=\"line\">      store,</span><br><span class=\"line\">      scrape,</span><br><span class=\"line\">      c.MetricResolution,</span><br><span class=\"line\">   )</span><br><span class=\"line\">   err = s.RegisterProbes(podInformerFactory)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> s, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-3-RunUntil\"><a href=\"#3-3-RunUntil\" class=\"headerlink\" title=\"3.3 RunUntil\"></a>3.3 RunUntil</h3><p>最终这里就是启动Node Informer、Pod Informer、指标抓取器、以及服务的启动（kubectl top node接口等等）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RunUntil starts background scraping goroutine and runs apiserver serving metrics.</span></span><br><span class=\"line\"><span class=\"comment\">// 注：GenericAPIServer主要处理apiregistration.k8s.io组下的APIService资源请求</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是Metrics—Server的请求，那么也会转发到对应的服务，这里最终的一步就是启动Metrics—Server的GenericAPIServer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span></span> RunUntil(stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">   ctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Start informers</span></span><br><span class=\"line\">   <span class=\"keyword\">go</span> s.nodes.Run(stopCh)</span><br><span class=\"line\">   <span class=\"keyword\">go</span> s.pods.Run(stopCh)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Ensure cache is up to date</span></span><br><span class=\"line\">   ok := cache.WaitForCacheSync(stopCh, s.nodes.HasSynced)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ok = cache.WaitForCacheSync(stopCh, s.pods.HasSynced)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Start serving API and scrape loop</span></span><br><span class=\"line\">   <span class=\"keyword\">go</span> s.runScrape(ctx)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> s.GenericAPIServer.PrepareRun().Run(stopCh)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-指标抓取\"><a href=\"#4-指标抓取\" class=\"headerlink\" title=\"4. 指标抓取\"></a>4. 指标抓取</h2><p>指标抓取从上面我们可以看到是调用了<code>runScrape</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span></span> runScrape(ctx context.Context) &#123;</span><br><span class=\"line\">   ticker := time.NewTicker(s.resolution)</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> ticker.Stop()</span><br><span class=\"line\">   s.tick(ctx, time.Now())</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> startTime := &lt;-ticker.C:</span><br><span class=\"line\">         s.tick(ctx, startTime)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">         <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而 <code>runScrape</code> 里面其实是调用了一个定时任务，其中启动了：</p>\n<ul>\n<li>s.scraper.Scrape(ctx) 进行指标抓取</li>\n<li>s.storage.Store(data) 对指标进行存储</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tick 是指标抓取和存储的定时任务，通过s.scraper.Scrape(ctx)抓取，s.storage.Store(data)存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span></span> tick(ctx context.Context, startTime time.Time) &#123;</span><br><span class=\"line\">   s.tickStatusMux.Lock()</span><br><span class=\"line\">   s.tickLastStart = startTime</span><br><span class=\"line\">   s.tickStatusMux.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">   ctx, cancelTimeout := context.WithTimeout(ctx, s.resolution)</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> cancelTimeout()</span><br><span class=\"line\"></span><br><span class=\"line\">   klog.V(<span class=\"number\">6</span>).InfoS(<span class=\"string\">&quot;Scraping metrics&quot;</span>)</span><br><span class=\"line\">   data := s.scraper.Scrape(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">   klog.V(<span class=\"number\">6</span>).InfoS(<span class=\"string\">&quot;Storing metrics&quot;</span>)</span><br><span class=\"line\">   s.storage.Store(data)</span><br><span class=\"line\"></span><br><span class=\"line\">   collectTime := time.Since(startTime)</span><br><span class=\"line\">   tickDuration.Observe(<span class=\"type\">float64</span>(collectTime) / <span class=\"type\">float64</span>(time.Second))</span><br><span class=\"line\">   klog.V(<span class=\"number\">6</span>).InfoS(<span class=\"string\">&quot;Scraping cycle complete&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-1-s-scraper-Scrape\"><a href=\"#4-1-s-scraper-Scrape\" class=\"headerlink\" title=\"4.1 s.scraper.Scrape\"></a>4.1 s.scraper.Scrape</h3><p>核心就是对node进行for，然后启动协程去抓取，可以看到每个协程会随机进行休眠，然后调用 collectNode 对接点进行抓取</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *scraper)</span></span> Scrape(baseCtx context.Context) *storage.MetricsBatch &#123;</span><br><span class=\"line\">   nodes, err := c.nodeLister.List(c.labelSelector)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// report the error and continue on in case of partial results</span></span><br><span class=\"line\">      klog.ErrorS(err, <span class=\"string\">&quot;Failed to list nodes&quot;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   klog.V(<span class=\"number\">1</span>).InfoS(<span class=\"string\">&quot;Scraping metrics from nodes&quot;</span>, <span class=\"string\">&quot;nodes&quot;</span>, klog.KObjSlice(nodes), <span class=\"string\">&quot;nodeCount&quot;</span>, <span class=\"built_in\">len</span>(nodes), <span class=\"string\">&quot;nodeSelector&quot;</span>, c.labelSelector)</span><br><span class=\"line\"></span><br><span class=\"line\">   responseChannel := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *storage.MetricsBatch, <span class=\"built_in\">len</span>(nodes))</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(responseChannel)</span><br><span class=\"line\"></span><br><span class=\"line\">   startTime := myClock.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// TODO(serathius): re-evaluate this code -- do we really need to stagger fetches like this?</span></span><br><span class=\"line\">   delayMs := delayPerSourceMs * <span class=\"built_in\">len</span>(nodes)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> delayMs &gt; maxDelayMs &#123;</span><br><span class=\"line\">      delayMs = maxDelayMs</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> _, node := <span class=\"keyword\">range</span> nodes &#123;</span><br><span class=\"line\">      <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(node *corev1.Node)</span></span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Prevents network congestion.</span></span><br><span class=\"line\">         <span class=\"comment\">// 每个协程随机sleep一段时间，防止几个协程同事发起请求而造成网络堵塞</span></span><br><span class=\"line\">         sleepDuration := time.Duration(rand.Intn(delayMs)) * time.Millisecond</span><br><span class=\"line\">         time.Sleep(sleepDuration)</span><br><span class=\"line\">         <span class=\"comment\">// make the timeout a bit shorter to account for staggering, so we still preserve</span></span><br><span class=\"line\">         <span class=\"comment\">// the overall timeout</span></span><br><span class=\"line\">         ctx, cancelTimeout := context.WithTimeout(baseCtx, c.scrapeTimeout)</span><br><span class=\"line\">         <span class=\"keyword\">defer</span> cancelTimeout()</span><br><span class=\"line\">         klog.V(<span class=\"number\">2</span>).InfoS(<span class=\"string\">&quot;Scraping node&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, klog.KObj(node))</span><br><span class=\"line\">         m, err := c.collectNode(ctx, node)</span><br><span class=\"line\">         <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> errors.Is(err, context.DeadlineExceeded) &#123;</span><br><span class=\"line\">               klog.ErrorS(err, <span class=\"string\">&quot;Failed to scrape node, timeout to access kubelet&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, klog.KObj(node), <span class=\"string\">&quot;timeout&quot;</span>, c.scrapeTimeout)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               klog.ErrorS(err, <span class=\"string\">&quot;Failed to scrape node&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, klog.KObj(node))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         responseChannel &lt;- m</span><br><span class=\"line\">      &#125;(node)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">   res := &amp;storage.MetricsBatch&#123;</span><br><span class=\"line\">      Nodes: <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]storage.MetricsPoint&#123;&#125;,</span><br><span class=\"line\">      Pods:  <span class=\"keyword\">map</span>[apitypes.NamespacedName]storage.PodMetricsPoint&#123;&#125;,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">\t <span class=\"comment\">// 这里是对指标重新分类筛选，Node纬度、Pod纬度\t</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> <span class=\"keyword\">range</span> nodes &#123;</span><br><span class=\"line\">      srcBatch := &lt;-responseChannel</span><br><span class=\"line\">      <span class=\"keyword\">if</span> srcBatch == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> nodeName, nodeMetricsPoint := <span class=\"keyword\">range</span> srcBatch.Nodes &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> _, nodeFind := res.Nodes[nodeName]; nodeFind &#123;</span><br><span class=\"line\">            klog.ErrorS(<span class=\"literal\">nil</span>, <span class=\"string\">&quot;Got duplicate node point&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, klog.KRef(<span class=\"string\">&quot;&quot;</span>, nodeName))</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         res.Nodes[nodeName] = nodeMetricsPoint</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> podRef, podMetricsPoint := <span class=\"keyword\">range</span> srcBatch.Pods &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> _, podFind := res.Pods[podRef]; podFind &#123;</span><br><span class=\"line\">            klog.ErrorS(<span class=\"literal\">nil</span>, <span class=\"string\">&quot;Got duplicate pod point&quot;</span>, <span class=\"string\">&quot;pod&quot;</span>, klog.KRef(podRef.Namespace, podRef.Name))</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         res.Pods[podRef] = podMetricsPoint</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   klog.V(<span class=\"number\">1</span>).InfoS(<span class=\"string\">&quot;Scrape finished&quot;</span>, <span class=\"string\">&quot;duration&quot;</span>, myClock.Since(startTime), <span class=\"string\">&quot;nodeCount&quot;</span>, <span class=\"built_in\">len</span>(res.Nodes), <span class=\"string\">&quot;podCount&quot;</span>, <span class=\"built_in\">len</span>(res.Pods))</span><br><span class=\"line\">   <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>collectNode 实际上就是调用kubeletClient的GetMetrics</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实际上就是调用GetMetrics接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *scraper)</span></span> collectNode(ctx context.Context, node *corev1.Node) (*storage.MetricsBatch, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">   startTime := myClock.Now()</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      requestDuration.WithLabelValues(node.Name).Observe(<span class=\"type\">float64</span>(myClock.Since(startTime)) / <span class=\"type\">float64</span>(time.Second))</span><br><span class=\"line\">      lastRequestTime.WithLabelValues(node.Name).Set(<span class=\"type\">float64</span>(myClock.Now().Unix()))</span><br><span class=\"line\">   &#125;()</span><br><span class=\"line\">   ms, err := c.kubeletClient.GetMetrics(ctx, node)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      requestTotal.WithLabelValues(<span class=\"string\">&quot;false&quot;</span>).Inc()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   requestTotal.WithLabelValues(<span class=\"string\">&quot;true&quot;</span>).Inc()</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ms, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetMetrics implements client.KubeletMetricsGetter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(kc *kubeletClient)</span></span> GetMetrics(ctx context.Context, node *corev1.Node) (*storage.MetricsBatch, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\tport := kc.defaultPort</span><br><span class=\"line\">\tnodeStatusPort := <span class=\"type\">int</span>(node.Status.DaemonEndpoints.KubeletEndpoint.Port)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> kc.useNodeStatusPort &amp;&amp; nodeStatusPort != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tport = nodeStatusPort</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\taddr, err := kc.addrResolver.NodeAddress(node)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\turl := url.URL&#123;</span><br><span class=\"line\">\t\tScheme: kc.scheme,</span><br><span class=\"line\">\t\tHost:   net.JoinHostPort(addr, strconv.Itoa(port)),</span><br><span class=\"line\">\t\tPath:   <span class=\"string\">&quot;/metrics/resource&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> kc.getMetrics(ctx, url.String(), node.Name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//nolint:staticcheck // to disable SA6002 (argument should be pointer-like to avoid allocations)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(kc *kubeletClient)</span></span> getMetrics(ctx context.Context, url, nodeName <span class=\"type\">string</span>) (*storage.MetricsBatch, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\treq, err := http.NewRequest(<span class=\"string\">&quot;GET&quot;</span>, url, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trequestTime := time.Now()</span><br><span class=\"line\">\tresponse, err := kc.client.Do(req.WithContext(ctx))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> response.Body.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> response.StatusCode != http.StatusOK &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;request failed, status: %q&quot;</span>, response.Status)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tb := kc.buffers.Get().([]<span class=\"type\">byte</span>)</span><br><span class=\"line\">\tbuf := bytes.NewBuffer(b)</span><br><span class=\"line\">\tbuf.Reset()</span><br><span class=\"line\">\t_, err = io.Copy(buf, response.Body)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tkc.buffers.Put(b)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;failed to read response body - %v&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tb = buf.Bytes()</span><br><span class=\"line\">\tms, err := decodeBatch(b, requestTime, nodeName)</span><br><span class=\"line\">\tkc.buffers.Put(b)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ms, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-2-s-storage-Store\"><a href=\"#4-2-s-storage-Store\" class=\"headerlink\" title=\"4.2 s.storage.Store\"></a>4.2 s.storage.Store</h3><p>存储是将Node、Pod区分开来存储的，因为不需要记录历史继续，所以也比较简单，基本逻辑就是遍历指标，查看是否存在，不存在就直接怼进去新的，存在的话就比较一下指标的时间，如果是新的，就覆盖原来的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *storage)</span></span> Store(batch *MetricsBatch) &#123;</span><br><span class=\"line\">   s.mu.Lock()</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> s.mu.Unlock()</span><br><span class=\"line\">   s.nodes.Store(batch)</span><br><span class=\"line\">   s.pods.Store(batch)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>节点存储的数据结构，看到last和prev，其实就知道这玩意就是链表存储方式</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nodeStorage stores last two node metric batches and calculates cpu &amp; memory usage</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This implementation only stores metric points if they are newer than the</span></span><br><span class=\"line\"><span class=\"comment\">// points already stored and the cpuUsageOverTime function used to handle</span></span><br><span class=\"line\"><span class=\"comment\">// cumulative metrics assumes that the time window is different from 0.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> nodeStorage <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// last stores node metric points from last scrape</span></span><br><span class=\"line\">   last <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint</span><br><span class=\"line\">   <span class=\"comment\">// prev stores node metric points from scrape preceding the last one.</span></span><br><span class=\"line\">   <span class=\"comment\">// Points timestamp should proceed the corresponding points from last.</span></span><br><span class=\"line\">   prev <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *nodeStorage)</span></span> Store(batch *MetricsBatch) &#123;</span><br><span class=\"line\">\tlastNodes := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint, <span class=\"built_in\">len</span>(batch.Nodes))</span><br><span class=\"line\">\tprevNodes := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint, <span class=\"built_in\">len</span>(batch.Nodes))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> nodeName, newPoint := <span class=\"keyword\">range</span> batch.Nodes &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, exists := lastNodes[nodeName]; exists &#123;</span><br><span class=\"line\">\t\t\tklog.ErrorS(<span class=\"literal\">nil</span>, <span class=\"string\">&quot;Got duplicate node point&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, klog.KRef(<span class=\"string\">&quot;&quot;</span>, nodeName))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlastNodes[nodeName] = newPoint</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> lastNode, found := s.last[nodeName]; found &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// If new point is different then one already stored</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> newPoint.Timestamp.After(lastNode.Timestamp) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Move stored point to previous</span></span><br><span class=\"line\">\t\t\t\tprevNodes[nodeName] = lastNode</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> prevPoint, found := s.prev[nodeName]; found &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> prevPoint.Timestamp.Before(newPoint.Timestamp) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Keep previous point</span></span><br><span class=\"line\">\t\t\t\t\tprevNodes[nodeName] = prevPoint</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tklog.V(<span class=\"number\">2</span>).InfoS(<span class=\"string\">&quot;Found new node metrics point is older than stored previous, drop previous&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;node&quot;</span>, nodeName,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;previousTimestamp&quot;</span>, prevPoint.Timestamp,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;timestamp&quot;</span>, newPoint.Timestamp)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.last = lastNodes</span><br><span class=\"line\">\ts.prev = prevNodes</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Only count last for which metrics can be returned.</span></span><br><span class=\"line\">  <span class=\"comment\">// 只计算最后可以返回的指标</span></span><br><span class=\"line\">\tpointsStored.WithLabelValues(<span class=\"string\">&quot;node&quot;</span>).Set(<span class=\"type\">float64</span>(<span class=\"built_in\">len</span>(prevNodes)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Pod的也是大同小异</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nodeStorage stores last two pod metric batches and calculates cpu &amp; memory usage</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This implementation only stores metric points if they are newer than the</span></span><br><span class=\"line\"><span class=\"comment\">// points already stored and the cpuUsageOverTime function used to handle</span></span><br><span class=\"line\"><span class=\"comment\">// cumulative metrics assumes that the time window is different from 0.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> podStorage <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// last stores pod metric points from last scrape</span></span><br><span class=\"line\">\tlast <span class=\"keyword\">map</span>[apitypes.NamespacedName]PodMetricsPoint</span><br><span class=\"line\">\t<span class=\"comment\">// prev stores pod metric points from scrape preceding the last one.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Points timestamp should proceed the corresponding points from last and have same start time (no restart between them).</span></span><br><span class=\"line\">\tprev <span class=\"keyword\">map</span>[apitypes.NamespacedName]PodMetricsPoint</span><br><span class=\"line\">\t<span class=\"comment\">// scrape period of metrics server</span></span><br><span class=\"line\">\tmetricResolution time.Duration</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可能是出于Pod的数量可能较多，还需要判断一下指标的抓取周期，也就是字段 metricResolution，使用位置是在对新的 Point 的时间戳以及起始时间的差值进行比较。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newPoint.Timestamp.Sub(newPoint.StartTime) &lt; s.metricResolution</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *podStorage)</span></span> Store(newPods *MetricsBatch) &#123;</span><br><span class=\"line\">   lastPods := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[apitypes.NamespacedName]PodMetricsPoint, <span class=\"built_in\">len</span>(newPods.Pods))</span><br><span class=\"line\">   prevPods := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[apitypes.NamespacedName]PodMetricsPoint, <span class=\"built_in\">len</span>(newPods.Pods))</span><br><span class=\"line\">   <span class=\"keyword\">var</span> containerCount <span class=\"type\">int</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> podRef, newPod := <span class=\"keyword\">range</span> newPods.Pods &#123;</span><br><span class=\"line\">      podRef := apitypes.NamespacedName&#123;Name: podRef.Name, Namespace: podRef.Namespace&#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> _, found := lastPods[podRef]; found &#123;</span><br><span class=\"line\">         klog.ErrorS(<span class=\"literal\">nil</span>, <span class=\"string\">&quot;Got duplicate pod point&quot;</span>, <span class=\"string\">&quot;pod&quot;</span>, klog.KRef(podRef.Namespace, podRef.Name))</span><br><span class=\"line\">         <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      newLastPod := PodMetricsPoint&#123;Containers: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint, <span class=\"built_in\">len</span>(newPod.Containers))&#125;</span><br><span class=\"line\">      newPrevPod := PodMetricsPoint&#123;Containers: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint, <span class=\"built_in\">len</span>(newPod.Containers))&#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> containerName, newPoint := <span class=\"keyword\">range</span> newPod.Containers &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> _, exists := newLastPod.Containers[containerName]; exists &#123;</span><br><span class=\"line\">            klog.ErrorS(<span class=\"literal\">nil</span>, <span class=\"string\">&quot;Got duplicate Container point&quot;</span>, <span class=\"string\">&quot;container&quot;</span>, containerName, <span class=\"string\">&quot;pod&quot;</span>, klog.KRef(podRef.Namespace, podRef.Name))</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         newLastPod.Containers[containerName] = newPoint</span><br><span class=\"line\">         <span class=\"keyword\">if</span> newPoint.StartTime.Before(newPoint.Timestamp) &amp;&amp; newPoint.Timestamp.Sub(newPoint.StartTime) &lt; s.metricResolution &amp;&amp; newPoint.Timestamp.Sub(newPoint.StartTime) &gt;= freshContainerMinMetricsResolution &#123;</span><br><span class=\"line\">            copied := newPoint</span><br><span class=\"line\">            copied.Timestamp = newPoint.StartTime</span><br><span class=\"line\">            copied.CumulativeCpuUsed = <span class=\"number\">0</span></span><br><span class=\"line\">            newPrevPod.Containers[containerName] = copied</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> lastPod, found := s.last[podRef]; found &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Keep previous metric point if newPoint has not restarted (new metric start time &lt; stored timestamp)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> lastContainer, found := lastPod.Containers[containerName]; found &amp;&amp; newPoint.StartTime.Before(lastContainer.Timestamp) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// If new point is different then one already stored</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> newPoint.Timestamp.After(lastContainer.Timestamp) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// Move stored point to previous</span></span><br><span class=\"line\">                  newPrevPod.Containers[containerName] = lastContainer</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> prevPod, found := s.prev[podRef]; found &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> prevPod.Containers[containerName].Timestamp.Before(newPoint.Timestamp) &#123;</span><br><span class=\"line\">                     <span class=\"comment\">// Keep previous point</span></span><br><span class=\"line\">                     newPrevPod.Containers[containerName] = prevPod.Containers[containerName]</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                     klog.V(<span class=\"number\">2</span>).InfoS(<span class=\"string\">&quot;Found new containerName metrics point is older than stored previous , drop previous&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;containerName&quot;</span>, containerName,</span><br><span class=\"line\">                        <span class=\"string\">&quot;pod&quot;</span>, klog.KRef(podRef.Namespace, podRef.Name),</span><br><span class=\"line\">                        <span class=\"string\">&quot;previousTimestamp&quot;</span>, prevPod.Containers[containerName].Timestamp,</span><br><span class=\"line\">                        <span class=\"string\">&quot;timestamp&quot;</span>, newPoint.Timestamp)</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      containerPoints := <span class=\"built_in\">len</span>(newPrevPod.Containers)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> containerPoints &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">         prevPods[podRef] = newPrevPod</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      lastPods[podRef] = newLastPod</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Only count containers for which metrics can be returned.</span></span><br><span class=\"line\">      containerCount += containerPoints</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   s.last = lastPods</span><br><span class=\"line\">   s.prev = prevPods</span><br><span class=\"line\"></span><br><span class=\"line\">   pointsStored.WithLabelValues(<span class=\"string\">&quot;container&quot;</span>).Set(<span class=\"type\">float64</span>(containerCount))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h2><p>最近刚好在做HPA，就想着先把kubernetes使用metrics-server的源码先看看，毕竟这也是HPA能够实现的依据，metrics-server主要也是通过aggregate api向其他组件提供集群当中的pod和node的cpu跟内存监控指标的。</p>\n<h2 id=\"2-数据结构\"><a href=\"#2-数据结构\" class=\"headerlink\" title=\"2.数据结构\"></a>2.数据结构</h2><p>抓取接口是通过</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/kubernetes-sigs/metrics-server/blob/83b2e01f9825849ae5f562e47aa1a4178b5d06e5/pkg/scraper/interface.go#L24</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Scraper <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tScrape(ctx context.Context) *storage.MetricsBatch</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从接口我们可以看到返回的是，storage.MetricsBatch，我们可以从源码当中的mock数据窥探出数据的大概模样</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/kubernetes-sigs/metrics-server/blob/83b2e01f9825849ae5f562e47aa1a4178b5d06e5/pkg/server/server_test.go#L47</span></span><br><span class=\"line\">BeforeEach(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tresolution = <span class=\"number\">60</span> * time.Second</span><br><span class=\"line\">\t\tscraper = &amp;scraperMock&#123;</span><br><span class=\"line\">\t\t\tresult: &amp;storage.MetricsBatch&#123;</span><br><span class=\"line\">\t\t\t\tNodes: <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]storage.MetricsPoint&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;node1&quot;</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\tTimestamp:         time.Now(),</span><br><span class=\"line\">\t\t\t\t\t\tCumulativeCpuUsed: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\t\t\tMemoryUsage:       <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstore = &amp;storageMock&#123;&#125;</span><br><span class=\"line\">\t\tserver = NewServer(<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, store, scraper, resolution)</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-启动流程\"><a href=\"#3-启动流程\" class=\"headerlink\" title=\"3.启动流程\"></a>3.启动流程</h2><p><img src=\"/static/image/notes/2023/02/20/%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B%E5%9B%BE.png\" alt=\"整体流程图\"></p>\n<p><code>main</code>函数就不画出来了，跟其他kubernetes系列项目一样，都是使用cobra来启动的，然后导向到NewMetricsServerCommand</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// NewMetricsServerCommand provides a CLI handler for the metrics server entrypoint</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewMetricsServerCommand</span><span class=\"params\">(stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span></span> *cobra.Command &#123;</span><br><span class=\"line\">   opts := options.NewOptions()</span><br><span class=\"line\">   cmd := &amp;cobra.Command&#123;</span><br><span class=\"line\">      Short: <span class=\"string\">&quot;Launch metrics-server&quot;</span>,</span><br><span class=\"line\">      Long:  <span class=\"string\">&quot;Launch metrics-server&quot;</span>,</span><br><span class=\"line\">      RunE: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *cobra.Command, args []<span class=\"type\">string</span>)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> err := runCommand(opts, stopCh); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> err</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fs := cmd.Flags()</span><br><span class=\"line\">   nfs := opts.Flags()</span><br><span class=\"line\">   <span class=\"keyword\">for</span> _, f := <span class=\"keyword\">range</span> nfs.FlagSets &#123;</span><br><span class=\"line\">      fs.AddFlagSet(f)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   local := flag.NewFlagSet(os.Args[<span class=\"number\">0</span>], flag.ExitOnError)</span><br><span class=\"line\">   logs.AddGoFlags(local)</span><br><span class=\"line\">   nfs.FlagSet(<span class=\"string\">&quot;logging&quot;</span>).AddGoFlagSet(local)</span><br><span class=\"line\"></span><br><span class=\"line\">   usageFmt := <span class=\"string\">&quot;Usage:\\n  %s\\n&quot;</span></span><br><span class=\"line\">   cols, _, _ := term.TerminalSize(cmd.OutOrStdout())</span><br><span class=\"line\">   cmd.SetUsageFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">      fmt.Fprintf(cmd.OutOrStderr(), usageFmt, cmd.UseLine())</span><br><span class=\"line\">      cliflag.PrintSections(cmd.OutOrStderr(), nfs, cols)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   cmd.SetHelpFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cmd *cobra.Command, args []<span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">      fmt.Fprintf(cmd.OutOrStdout(), <span class=\"string\">&quot;%s\\n\\n&quot;</span>+usageFmt, cmd.Long, cmd.UseLine())</span><br><span class=\"line\">      cliflag.PrintSections(cmd.OutOrStdout(), nfs, cols)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   fs.AddGoFlagSet(local)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> cmd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>真正的运行都是包含在<code>runCommand</code>当中，其他就是关于参数的解析校验类的。<code>runCommand</code>当中主要就是三步</p>\n<ol>\n<li>根据配置文件、启动参数、默认参数生成启动的配置信息</li>\n<li>根据配置信息完成启动的一些对象实例化</li>\n<li>真正启动服务</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">runCommand</span><span class=\"params\">(o *options.Options, stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> o.ShowVersion &#123;</span><br><span class=\"line\">      fmt.Println(version.Get().GitVersion)</span><br><span class=\"line\">      os.Exit(<span class=\"number\">0</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   errors := o.Validate()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(errors) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> errors[<span class=\"number\">0</span>]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 生成metric-server的server端配置</span></span><br><span class=\"line\">   config, err := o.ServerConfig()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 完成配置注入</span></span><br><span class=\"line\">   s, err := config.Complete()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 真正启动服务</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> s.RunUntil(stopCh)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-1-ServerConfig\"><a href=\"#3-1-ServerConfig\" class=\"headerlink\" title=\"3.1 ServerConfig\"></a>3.1 ServerConfig</h3><p><code>ServerConfig</code> 就是生成配置文件的，其中有个Client端的配置生成，重点主要看两个</p>\n<ul>\n<li>APIServer的配置生成</li>\n<li>Client端的配置生成</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o Options)</span></span> ServerConfig() (*server.Config, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">   apiserver, err := o.ApiserverConfig()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   restConfig, err := o.restConfig()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;server.Config&#123;</span><br><span class=\"line\">      Apiserver: apiserver,</span><br><span class=\"line\">      Rest:      restConfig,</span><br><span class=\"line\">      <span class=\"comment\">// 生成Client端的配置</span></span><br><span class=\"line\">      Kubelet:          o.KubeletClient.Config(restConfig),</span><br><span class=\"line\">      MetricResolution: o.MetricResolution,</span><br><span class=\"line\">      ScrapeTimeout:    o.KubeletClient.KubeletRequestTimeout,</span><br><span class=\"line\">      NodeSelector:     o.KubeletClient.NodeSelector,</span><br><span class=\"line\">   &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>APIServer的配置生成</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o Options)</span></span> ApiserverConfig() (*genericapiserver.Config, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 检查证书是否可以读取，如果不可以则尝试生成自签名证书</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := o.SecureServing.MaybeDefaultWithSelfSignedCerts(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"literal\">nil</span>, []net.IP&#123;net.ParseIP(<span class=\"string\">&quot;127.0.0.1&quot;</span>)&#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;error creating self-signed certificates: %v&quot;</span>, err)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   serverConfig := genericapiserver.NewConfig(api.Codecs)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := o.SecureServing.ApplyTo(&amp;serverConfig.SecureServing, &amp;serverConfig.LoopbackClientConfig); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> !o.DisableAuthForTesting &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := o.Authentication.ApplyTo(&amp;serverConfig.Authentication, serverConfig.SecureServing, <span class=\"literal\">nil</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := o.Authorization.ApplyTo(&amp;serverConfig.Authorization); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := o.Audit.ApplyTo(serverConfig); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   versionGet := version.Get()</span><br><span class=\"line\">   serverConfig.Version = &amp;versionGet</span><br><span class=\"line\">   <span class=\"comment\">// enable OpenAPI schemas</span></span><br><span class=\"line\">   <span class=\"comment\">// 暴露OpenAPI断点</span></span><br><span class=\"line\">   serverConfig.OpenAPIConfig = genericapiserver.DefaultOpenAPIConfig(generatedopenapi.GetOpenAPIDefinitions, openapinamer.NewDefinitionNamer(api.Scheme))</span><br><span class=\"line\">   serverConfig.OpenAPIConfig.Info.Title = <span class=\"string\">&quot;Kubernetes metrics-server&quot;</span></span><br><span class=\"line\">   serverConfig.OpenAPIConfig.Info.Version = strings.Split(serverConfig.Version.String(), <span class=\"string\">&quot;-&quot;</span>)[<span class=\"number\">0</span>] <span class=\"comment\">// TODO(directxman12): remove this once autosetting this doesn&#x27;t require security definitions</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> serverConfig, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Client端的配置生成</strong></p>\n<p>关于<code>metrics-server</code>访问<code>node</code>的优先级配置，就在<code>Client</code>端的配置里面了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Config 生成metric-server的client端配置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o KubeletClientOptions)</span></span> Config(restConfig *rest.Config) *client.KubeletClientConfig &#123;</span><br><span class=\"line\">   config := &amp;client.KubeletClientConfig&#123;</span><br><span class=\"line\">      Scheme:      <span class=\"string\">&quot;https&quot;</span>,</span><br><span class=\"line\">      DefaultPort: o.KubeletPort,</span><br><span class=\"line\">      <span class=\"comment\">// 节点访问优先级</span></span><br><span class=\"line\">      AddressTypePriority: o.addressResolverConfig(),</span><br><span class=\"line\">      UseNodeStatusPort:   o.KubeletUseNodeStatusPort,</span><br><span class=\"line\">      Client:              *rest.CopyConfig(restConfig),</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> o.DeprecatedCompletelyInsecureKubelet &#123;</span><br><span class=\"line\">      config.Scheme = <span class=\"string\">&quot;http&quot;</span></span><br><span class=\"line\">      config.Client = *rest.AnonymousClientConfig(&amp;config.Client) <span class=\"comment\">// don&#x27;t use auth to avoid leaking auth details to insecure endpoints</span></span><br><span class=\"line\">      config.Client.TLSClientConfig = rest.TLSClientConfig&#123;&#125;      <span class=\"comment\">// empty TLS config --&gt; no TLS</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> o.InsecureKubeletTLS &#123;</span><br><span class=\"line\">      config.Client.TLSClientConfig.Insecure = <span class=\"literal\">true</span></span><br><span class=\"line\">      config.Client.TLSClientConfig.CAData = <span class=\"literal\">nil</span></span><br><span class=\"line\">      config.Client.TLSClientConfig.CAFile = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(o.KubeletCAFile) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      config.Client.TLSClientConfig.CAFile = o.KubeletCAFile</span><br><span class=\"line\">      config.Client.TLSClientConfig.CAData = <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(o.KubeletClientCertFile) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      config.Client.TLSClientConfig.CertFile = o.KubeletClientCertFile</span><br><span class=\"line\">      config.Client.TLSClientConfig.CertData = <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(o.KubeletClientKeyFile) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      config.Client.TLSClientConfig.KeyFile = o.KubeletClientKeyFile</span><br><span class=\"line\">      config.Client.TLSClientConfig.KeyData = <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o KubeletClientOptions)</span></span> addressResolverConfig() []corev1.NodeAddressType &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 设置访问node的ip优先级（node当中保存着各种address，其中包含InternalIP、ExternalIP等）</span></span><br><span class=\"line\">   addrPriority := <span class=\"built_in\">make</span>([]corev1.NodeAddressType, <span class=\"built_in\">len</span>(o.KubeletPreferredAddressTypes))</span><br><span class=\"line\">   <span class=\"keyword\">for</span> i, addrType := <span class=\"keyword\">range</span> o.KubeletPreferredAddressTypes &#123;</span><br><span class=\"line\">      addrPriority[i] = corev1.NodeAddressType(addrType)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> addrPriority</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个参数解析可以在 cmd/metrics-server/app/options/kubelet_client.go#AddFlags当中看到</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 优先使用 InternalIP 来访问 kubelet，这样可以避免节点名称没有 DNS 解析记录时，通过节点名称调用节点 kubelet API 失败的情况</span></span><br><span class=\"line\">fs.StringSliceVar(&amp;o.KubeletPreferredAddressTypes, <span class=\"string\">&quot;kubelet-preferred-address-types&quot;</span>, o.KubeletPreferredAddressTypes, <span class=\"string\">&quot;The priority of node address types to use when determining which address to use to connect to a particular node&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-2-config-Complete\"><a href=\"#3-2-config-Complete\" class=\"headerlink\" title=\"3.2 config.Complete()\"></a>3.2 config.Complete()</h3><p><code>config.Complete()</code> 是根据配置信息去实例化了一些对象，其中包括：</p>\n<ul>\n<li>Pod Informer</li>\n<li>Node Informer</li>\n<li>指标抓取器</li>\n<li>指标存储器（这里的存储器只是一个内存型的简单存储，只保留最近的一次指标，其他历史指标不做持久化）</li>\n<li>还有kubernetes aggregate api 最常见的<code>genericServer</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c Config)</span></span> Complete() (*server, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> labelRequirement []labels.Requirement</span><br><span class=\"line\"></span><br><span class=\"line\">   podInformerFactory, err := runningPodMetadataInformer(c.Rest)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 生成Pod的Informer</span></span><br><span class=\"line\">   podInformer := podInformerFactory.ForResource(corev1.SchemeGroupVersion.WithResource(<span class=\"string\">&quot;pods&quot;</span>))</span><br><span class=\"line\">   informer, err := informerFactory(c.Rest)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   kubeletClient, err := resource.NewForConfig(c.Kubelet)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;unable to construct a client to connect to the kubelets: %v&quot;</span>, err)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 生成Node的Informer</span></span><br><span class=\"line\">   nodes := informer.Core().V1().Nodes()</span><br><span class=\"line\">   ns := strings.TrimSpace(c.NodeSelector)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ns != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">      labelRequirement, err = labels.ParseToRequirements(ns)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 指标抓取器</span></span><br><span class=\"line\">   scrape := scraper.NewScraper(nodes.Lister(), kubeletClient, c.ScrapeTimeout, labelRequirement)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Disable default metrics handler and create custom one</span></span><br><span class=\"line\">   c.Apiserver.EnableMetrics = <span class=\"literal\">false</span></span><br><span class=\"line\">   metricsHandler, err := c.metricsHandler()</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   genericServer, err := c.Apiserver.Complete(<span class=\"literal\">nil</span>).New(<span class=\"string\">&quot;metrics-server&quot;</span>, genericapiserver.NewEmptyDelegate())</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   genericServer.Handler.NonGoRestfulMux.HandleFunc(<span class=\"string\">&quot;/metrics&quot;</span>, metricsHandler)</span><br><span class=\"line\"></span><br><span class=\"line\">   store := storage.NewStorage(c.MetricResolution)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := api.Install(store, podInformer.Lister(), nodes.Lister(), genericServer, labelRequirement); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   s := NewServer(</span><br><span class=\"line\">      nodes.Informer(),</span><br><span class=\"line\">      podInformer.Informer(),</span><br><span class=\"line\">      genericServer,</span><br><span class=\"line\">      store,</span><br><span class=\"line\">      scrape,</span><br><span class=\"line\">      c.MetricResolution,</span><br><span class=\"line\">   )</span><br><span class=\"line\">   err = s.RegisterProbes(podInformerFactory)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> s, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-3-RunUntil\"><a href=\"#3-3-RunUntil\" class=\"headerlink\" title=\"3.3 RunUntil\"></a>3.3 RunUntil</h3><p>最终这里就是启动Node Informer、Pod Informer、指标抓取器、以及服务的启动（kubectl top node接口等等）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RunUntil starts background scraping goroutine and runs apiserver serving metrics.</span></span><br><span class=\"line\"><span class=\"comment\">// 注：GenericAPIServer主要处理apiregistration.k8s.io组下的APIService资源请求</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是Metrics—Server的请求，那么也会转发到对应的服务，这里最终的一步就是启动Metrics—Server的GenericAPIServer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span></span> RunUntil(stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">   ctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Start informers</span></span><br><span class=\"line\">   <span class=\"keyword\">go</span> s.nodes.Run(stopCh)</span><br><span class=\"line\">   <span class=\"keyword\">go</span> s.pods.Run(stopCh)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Ensure cache is up to date</span></span><br><span class=\"line\">   ok := cache.WaitForCacheSync(stopCh, s.nodes.HasSynced)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ok = cache.WaitForCacheSync(stopCh, s.pods.HasSynced)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Start serving API and scrape loop</span></span><br><span class=\"line\">   <span class=\"keyword\">go</span> s.runScrape(ctx)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> s.GenericAPIServer.PrepareRun().Run(stopCh)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-指标抓取\"><a href=\"#4-指标抓取\" class=\"headerlink\" title=\"4. 指标抓取\"></a>4. 指标抓取</h2><p>指标抓取从上面我们可以看到是调用了<code>runScrape</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span></span> runScrape(ctx context.Context) &#123;</span><br><span class=\"line\">   ticker := time.NewTicker(s.resolution)</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> ticker.Stop()</span><br><span class=\"line\">   s.tick(ctx, time.Now())</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> startTime := &lt;-ticker.C:</span><br><span class=\"line\">         s.tick(ctx, startTime)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">         <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而 <code>runScrape</code> 里面其实是调用了一个定时任务，其中启动了：</p>\n<ul>\n<li>s.scraper.Scrape(ctx) 进行指标抓取</li>\n<li>s.storage.Store(data) 对指标进行存储</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tick 是指标抓取和存储的定时任务，通过s.scraper.Scrape(ctx)抓取，s.storage.Store(data)存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *server)</span></span> tick(ctx context.Context, startTime time.Time) &#123;</span><br><span class=\"line\">   s.tickStatusMux.Lock()</span><br><span class=\"line\">   s.tickLastStart = startTime</span><br><span class=\"line\">   s.tickStatusMux.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">   ctx, cancelTimeout := context.WithTimeout(ctx, s.resolution)</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> cancelTimeout()</span><br><span class=\"line\"></span><br><span class=\"line\">   klog.V(<span class=\"number\">6</span>).InfoS(<span class=\"string\">&quot;Scraping metrics&quot;</span>)</span><br><span class=\"line\">   data := s.scraper.Scrape(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">   klog.V(<span class=\"number\">6</span>).InfoS(<span class=\"string\">&quot;Storing metrics&quot;</span>)</span><br><span class=\"line\">   s.storage.Store(data)</span><br><span class=\"line\"></span><br><span class=\"line\">   collectTime := time.Since(startTime)</span><br><span class=\"line\">   tickDuration.Observe(<span class=\"type\">float64</span>(collectTime) / <span class=\"type\">float64</span>(time.Second))</span><br><span class=\"line\">   klog.V(<span class=\"number\">6</span>).InfoS(<span class=\"string\">&quot;Scraping cycle complete&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-1-s-scraper-Scrape\"><a href=\"#4-1-s-scraper-Scrape\" class=\"headerlink\" title=\"4.1 s.scraper.Scrape\"></a>4.1 s.scraper.Scrape</h3><p>核心就是对node进行for，然后启动协程去抓取，可以看到每个协程会随机进行休眠，然后调用 collectNode 对接点进行抓取</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *scraper)</span></span> Scrape(baseCtx context.Context) *storage.MetricsBatch &#123;</span><br><span class=\"line\">   nodes, err := c.nodeLister.List(c.labelSelector)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// report the error and continue on in case of partial results</span></span><br><span class=\"line\">      klog.ErrorS(err, <span class=\"string\">&quot;Failed to list nodes&quot;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   klog.V(<span class=\"number\">1</span>).InfoS(<span class=\"string\">&quot;Scraping metrics from nodes&quot;</span>, <span class=\"string\">&quot;nodes&quot;</span>, klog.KObjSlice(nodes), <span class=\"string\">&quot;nodeCount&quot;</span>, <span class=\"built_in\">len</span>(nodes), <span class=\"string\">&quot;nodeSelector&quot;</span>, c.labelSelector)</span><br><span class=\"line\"></span><br><span class=\"line\">   responseChannel := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *storage.MetricsBatch, <span class=\"built_in\">len</span>(nodes))</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(responseChannel)</span><br><span class=\"line\"></span><br><span class=\"line\">   startTime := myClock.Now()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// TODO(serathius): re-evaluate this code -- do we really need to stagger fetches like this?</span></span><br><span class=\"line\">   delayMs := delayPerSourceMs * <span class=\"built_in\">len</span>(nodes)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> delayMs &gt; maxDelayMs &#123;</span><br><span class=\"line\">      delayMs = maxDelayMs</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> _, node := <span class=\"keyword\">range</span> nodes &#123;</span><br><span class=\"line\">      <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(node *corev1.Node)</span></span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Prevents network congestion.</span></span><br><span class=\"line\">         <span class=\"comment\">// 每个协程随机sleep一段时间，防止几个协程同事发起请求而造成网络堵塞</span></span><br><span class=\"line\">         sleepDuration := time.Duration(rand.Intn(delayMs)) * time.Millisecond</span><br><span class=\"line\">         time.Sleep(sleepDuration)</span><br><span class=\"line\">         <span class=\"comment\">// make the timeout a bit shorter to account for staggering, so we still preserve</span></span><br><span class=\"line\">         <span class=\"comment\">// the overall timeout</span></span><br><span class=\"line\">         ctx, cancelTimeout := context.WithTimeout(baseCtx, c.scrapeTimeout)</span><br><span class=\"line\">         <span class=\"keyword\">defer</span> cancelTimeout()</span><br><span class=\"line\">         klog.V(<span class=\"number\">2</span>).InfoS(<span class=\"string\">&quot;Scraping node&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, klog.KObj(node))</span><br><span class=\"line\">         m, err := c.collectNode(ctx, node)</span><br><span class=\"line\">         <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> errors.Is(err, context.DeadlineExceeded) &#123;</span><br><span class=\"line\">               klog.ErrorS(err, <span class=\"string\">&quot;Failed to scrape node, timeout to access kubelet&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, klog.KObj(node), <span class=\"string\">&quot;timeout&quot;</span>, c.scrapeTimeout)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               klog.ErrorS(err, <span class=\"string\">&quot;Failed to scrape node&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, klog.KObj(node))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         responseChannel &lt;- m</span><br><span class=\"line\">      &#125;(node)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">   res := &amp;storage.MetricsBatch&#123;</span><br><span class=\"line\">      Nodes: <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]storage.MetricsPoint&#123;&#125;,</span><br><span class=\"line\">      Pods:  <span class=\"keyword\">map</span>[apitypes.NamespacedName]storage.PodMetricsPoint&#123;&#125;,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">\t <span class=\"comment\">// 这里是对指标重新分类筛选，Node纬度、Pod纬度\t</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> <span class=\"keyword\">range</span> nodes &#123;</span><br><span class=\"line\">      srcBatch := &lt;-responseChannel</span><br><span class=\"line\">      <span class=\"keyword\">if</span> srcBatch == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> nodeName, nodeMetricsPoint := <span class=\"keyword\">range</span> srcBatch.Nodes &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> _, nodeFind := res.Nodes[nodeName]; nodeFind &#123;</span><br><span class=\"line\">            klog.ErrorS(<span class=\"literal\">nil</span>, <span class=\"string\">&quot;Got duplicate node point&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, klog.KRef(<span class=\"string\">&quot;&quot;</span>, nodeName))</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         res.Nodes[nodeName] = nodeMetricsPoint</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> podRef, podMetricsPoint := <span class=\"keyword\">range</span> srcBatch.Pods &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> _, podFind := res.Pods[podRef]; podFind &#123;</span><br><span class=\"line\">            klog.ErrorS(<span class=\"literal\">nil</span>, <span class=\"string\">&quot;Got duplicate pod point&quot;</span>, <span class=\"string\">&quot;pod&quot;</span>, klog.KRef(podRef.Namespace, podRef.Name))</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         res.Pods[podRef] = podMetricsPoint</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   klog.V(<span class=\"number\">1</span>).InfoS(<span class=\"string\">&quot;Scrape finished&quot;</span>, <span class=\"string\">&quot;duration&quot;</span>, myClock.Since(startTime), <span class=\"string\">&quot;nodeCount&quot;</span>, <span class=\"built_in\">len</span>(res.Nodes), <span class=\"string\">&quot;podCount&quot;</span>, <span class=\"built_in\">len</span>(res.Pods))</span><br><span class=\"line\">   <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>collectNode 实际上就是调用kubeletClient的GetMetrics</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实际上就是调用GetMetrics接口</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *scraper)</span></span> collectNode(ctx context.Context, node *corev1.Node) (*storage.MetricsBatch, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">   startTime := myClock.Now()</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      requestDuration.WithLabelValues(node.Name).Observe(<span class=\"type\">float64</span>(myClock.Since(startTime)) / <span class=\"type\">float64</span>(time.Second))</span><br><span class=\"line\">      lastRequestTime.WithLabelValues(node.Name).Set(<span class=\"type\">float64</span>(myClock.Now().Unix()))</span><br><span class=\"line\">   &#125;()</span><br><span class=\"line\">   ms, err := c.kubeletClient.GetMetrics(ctx, node)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      requestTotal.WithLabelValues(<span class=\"string\">&quot;false&quot;</span>).Inc()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   requestTotal.WithLabelValues(<span class=\"string\">&quot;true&quot;</span>).Inc()</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ms, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GetMetrics implements client.KubeletMetricsGetter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(kc *kubeletClient)</span></span> GetMetrics(ctx context.Context, node *corev1.Node) (*storage.MetricsBatch, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\tport := kc.defaultPort</span><br><span class=\"line\">\tnodeStatusPort := <span class=\"type\">int</span>(node.Status.DaemonEndpoints.KubeletEndpoint.Port)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> kc.useNodeStatusPort &amp;&amp; nodeStatusPort != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tport = nodeStatusPort</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\taddr, err := kc.addrResolver.NodeAddress(node)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\turl := url.URL&#123;</span><br><span class=\"line\">\t\tScheme: kc.scheme,</span><br><span class=\"line\">\t\tHost:   net.JoinHostPort(addr, strconv.Itoa(port)),</span><br><span class=\"line\">\t\tPath:   <span class=\"string\">&quot;/metrics/resource&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> kc.getMetrics(ctx, url.String(), node.Name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//nolint:staticcheck // to disable SA6002 (argument should be pointer-like to avoid allocations)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(kc *kubeletClient)</span></span> getMetrics(ctx context.Context, url, nodeName <span class=\"type\">string</span>) (*storage.MetricsBatch, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\treq, err := http.NewRequest(<span class=\"string\">&quot;GET&quot;</span>, url, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trequestTime := time.Now()</span><br><span class=\"line\">\tresponse, err := kc.client.Do(req.WithContext(ctx))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> response.Body.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> response.StatusCode != http.StatusOK &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;request failed, status: %q&quot;</span>, response.Status)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tb := kc.buffers.Get().([]<span class=\"type\">byte</span>)</span><br><span class=\"line\">\tbuf := bytes.NewBuffer(b)</span><br><span class=\"line\">\tbuf.Reset()</span><br><span class=\"line\">\t_, err = io.Copy(buf, response.Body)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tkc.buffers.Put(b)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;failed to read response body - %v&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tb = buf.Bytes()</span><br><span class=\"line\">\tms, err := decodeBatch(b, requestTime, nodeName)</span><br><span class=\"line\">\tkc.buffers.Put(b)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ms, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-2-s-storage-Store\"><a href=\"#4-2-s-storage-Store\" class=\"headerlink\" title=\"4.2 s.storage.Store\"></a>4.2 s.storage.Store</h3><p>存储是将Node、Pod区分开来存储的，因为不需要记录历史继续，所以也比较简单，基本逻辑就是遍历指标，查看是否存在，不存在就直接怼进去新的，存在的话就比较一下指标的时间，如果是新的，就覆盖原来的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *storage)</span></span> Store(batch *MetricsBatch) &#123;</span><br><span class=\"line\">   s.mu.Lock()</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> s.mu.Unlock()</span><br><span class=\"line\">   s.nodes.Store(batch)</span><br><span class=\"line\">   s.pods.Store(batch)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>节点存储的数据结构，看到last和prev，其实就知道这玩意就是链表存储方式</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nodeStorage stores last two node metric batches and calculates cpu &amp; memory usage</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This implementation only stores metric points if they are newer than the</span></span><br><span class=\"line\"><span class=\"comment\">// points already stored and the cpuUsageOverTime function used to handle</span></span><br><span class=\"line\"><span class=\"comment\">// cumulative metrics assumes that the time window is different from 0.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> nodeStorage <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// last stores node metric points from last scrape</span></span><br><span class=\"line\">   last <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint</span><br><span class=\"line\">   <span class=\"comment\">// prev stores node metric points from scrape preceding the last one.</span></span><br><span class=\"line\">   <span class=\"comment\">// Points timestamp should proceed the corresponding points from last.</span></span><br><span class=\"line\">   prev <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *nodeStorage)</span></span> Store(batch *MetricsBatch) &#123;</span><br><span class=\"line\">\tlastNodes := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint, <span class=\"built_in\">len</span>(batch.Nodes))</span><br><span class=\"line\">\tprevNodes := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint, <span class=\"built_in\">len</span>(batch.Nodes))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> nodeName, newPoint := <span class=\"keyword\">range</span> batch.Nodes &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _, exists := lastNodes[nodeName]; exists &#123;</span><br><span class=\"line\">\t\t\tklog.ErrorS(<span class=\"literal\">nil</span>, <span class=\"string\">&quot;Got duplicate node point&quot;</span>, <span class=\"string\">&quot;node&quot;</span>, klog.KRef(<span class=\"string\">&quot;&quot;</span>, nodeName))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlastNodes[nodeName] = newPoint</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> lastNode, found := s.last[nodeName]; found &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// If new point is different then one already stored</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> newPoint.Timestamp.After(lastNode.Timestamp) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Move stored point to previous</span></span><br><span class=\"line\">\t\t\t\tprevNodes[nodeName] = lastNode</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> prevPoint, found := s.prev[nodeName]; found &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> prevPoint.Timestamp.Before(newPoint.Timestamp) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Keep previous point</span></span><br><span class=\"line\">\t\t\t\t\tprevNodes[nodeName] = prevPoint</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tklog.V(<span class=\"number\">2</span>).InfoS(<span class=\"string\">&quot;Found new node metrics point is older than stored previous, drop previous&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;node&quot;</span>, nodeName,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;previousTimestamp&quot;</span>, prevPoint.Timestamp,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;timestamp&quot;</span>, newPoint.Timestamp)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts.last = lastNodes</span><br><span class=\"line\">\ts.prev = prevNodes</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Only count last for which metrics can be returned.</span></span><br><span class=\"line\">  <span class=\"comment\">// 只计算最后可以返回的指标</span></span><br><span class=\"line\">\tpointsStored.WithLabelValues(<span class=\"string\">&quot;node&quot;</span>).Set(<span class=\"type\">float64</span>(<span class=\"built_in\">len</span>(prevNodes)))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Pod的也是大同小异</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// nodeStorage stores last two pod metric batches and calculates cpu &amp; memory usage</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This implementation only stores metric points if they are newer than the</span></span><br><span class=\"line\"><span class=\"comment\">// points already stored and the cpuUsageOverTime function used to handle</span></span><br><span class=\"line\"><span class=\"comment\">// cumulative metrics assumes that the time window is different from 0.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> podStorage <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// last stores pod metric points from last scrape</span></span><br><span class=\"line\">\tlast <span class=\"keyword\">map</span>[apitypes.NamespacedName]PodMetricsPoint</span><br><span class=\"line\">\t<span class=\"comment\">// prev stores pod metric points from scrape preceding the last one.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Points timestamp should proceed the corresponding points from last and have same start time (no restart between them).</span></span><br><span class=\"line\">\tprev <span class=\"keyword\">map</span>[apitypes.NamespacedName]PodMetricsPoint</span><br><span class=\"line\">\t<span class=\"comment\">// scrape period of metrics server</span></span><br><span class=\"line\">\tmetricResolution time.Duration</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可能是出于Pod的数量可能较多，还需要判断一下指标的抓取周期，也就是字段 metricResolution，使用位置是在对新的 Point 的时间戳以及起始时间的差值进行比较。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newPoint.Timestamp.Sub(newPoint.StartTime) &lt; s.metricResolution</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *podStorage)</span></span> Store(newPods *MetricsBatch) &#123;</span><br><span class=\"line\">   lastPods := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[apitypes.NamespacedName]PodMetricsPoint, <span class=\"built_in\">len</span>(newPods.Pods))</span><br><span class=\"line\">   prevPods := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[apitypes.NamespacedName]PodMetricsPoint, <span class=\"built_in\">len</span>(newPods.Pods))</span><br><span class=\"line\">   <span class=\"keyword\">var</span> containerCount <span class=\"type\">int</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> podRef, newPod := <span class=\"keyword\">range</span> newPods.Pods &#123;</span><br><span class=\"line\">      podRef := apitypes.NamespacedName&#123;Name: podRef.Name, Namespace: podRef.Namespace&#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> _, found := lastPods[podRef]; found &#123;</span><br><span class=\"line\">         klog.ErrorS(<span class=\"literal\">nil</span>, <span class=\"string\">&quot;Got duplicate pod point&quot;</span>, <span class=\"string\">&quot;pod&quot;</span>, klog.KRef(podRef.Namespace, podRef.Name))</span><br><span class=\"line\">         <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      newLastPod := PodMetricsPoint&#123;Containers: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint, <span class=\"built_in\">len</span>(newPod.Containers))&#125;</span><br><span class=\"line\">      newPrevPod := PodMetricsPoint&#123;Containers: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]MetricsPoint, <span class=\"built_in\">len</span>(newPod.Containers))&#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> containerName, newPoint := <span class=\"keyword\">range</span> newPod.Containers &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> _, exists := newLastPod.Containers[containerName]; exists &#123;</span><br><span class=\"line\">            klog.ErrorS(<span class=\"literal\">nil</span>, <span class=\"string\">&quot;Got duplicate Container point&quot;</span>, <span class=\"string\">&quot;container&quot;</span>, containerName, <span class=\"string\">&quot;pod&quot;</span>, klog.KRef(podRef.Namespace, podRef.Name))</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         newLastPod.Containers[containerName] = newPoint</span><br><span class=\"line\">         <span class=\"keyword\">if</span> newPoint.StartTime.Before(newPoint.Timestamp) &amp;&amp; newPoint.Timestamp.Sub(newPoint.StartTime) &lt; s.metricResolution &amp;&amp; newPoint.Timestamp.Sub(newPoint.StartTime) &gt;= freshContainerMinMetricsResolution &#123;</span><br><span class=\"line\">            copied := newPoint</span><br><span class=\"line\">            copied.Timestamp = newPoint.StartTime</span><br><span class=\"line\">            copied.CumulativeCpuUsed = <span class=\"number\">0</span></span><br><span class=\"line\">            newPrevPod.Containers[containerName] = copied</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> lastPod, found := s.last[podRef]; found &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Keep previous metric point if newPoint has not restarted (new metric start time &lt; stored timestamp)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> lastContainer, found := lastPod.Containers[containerName]; found &amp;&amp; newPoint.StartTime.Before(lastContainer.Timestamp) &#123;</span><br><span class=\"line\">               <span class=\"comment\">// If new point is different then one already stored</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> newPoint.Timestamp.After(lastContainer.Timestamp) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// Move stored point to previous</span></span><br><span class=\"line\">                  newPrevPod.Containers[containerName] = lastContainer</span><br><span class=\"line\">               &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> prevPod, found := s.prev[podRef]; found &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> prevPod.Containers[containerName].Timestamp.Before(newPoint.Timestamp) &#123;</span><br><span class=\"line\">                     <span class=\"comment\">// Keep previous point</span></span><br><span class=\"line\">                     newPrevPod.Containers[containerName] = prevPod.Containers[containerName]</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                     klog.V(<span class=\"number\">2</span>).InfoS(<span class=\"string\">&quot;Found new containerName metrics point is older than stored previous , drop previous&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;containerName&quot;</span>, containerName,</span><br><span class=\"line\">                        <span class=\"string\">&quot;pod&quot;</span>, klog.KRef(podRef.Namespace, podRef.Name),</span><br><span class=\"line\">                        <span class=\"string\">&quot;previousTimestamp&quot;</span>, prevPod.Containers[containerName].Timestamp,</span><br><span class=\"line\">                        <span class=\"string\">&quot;timestamp&quot;</span>, newPoint.Timestamp)</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      containerPoints := <span class=\"built_in\">len</span>(newPrevPod.Containers)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> containerPoints &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">         prevPods[podRef] = newPrevPod</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      lastPods[podRef] = newLastPod</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Only count containers for which metrics can be returned.</span></span><br><span class=\"line\">      containerCount += containerPoints</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   s.last = lastPods</span><br><span class=\"line\">   s.prev = prevPods</span><br><span class=\"line\"></span><br><span class=\"line\">   pointsStored.WithLabelValues(<span class=\"string\">&quot;container&quot;</span>).Set(<span class=\"type\">float64</span>(containerCount))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}